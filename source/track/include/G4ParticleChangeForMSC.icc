//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// 


inline
 void G4ParticleChangeForMSC::ProposeMomentumDirection(const G4ThreeVector& P)
{
  theMomentumDirection = P;
}

inline
 void G4ParticleChangeForMSC::SetProposedMomentumDirection(const G4ThreeVector& P)
{
  theMomentumDirection = P;
}

inline
 void G4ParticleChangeForMSC::ProposeMomentumDirection(G4double Px, G4double Py, G4double Pz)
{
  theMomentumDirection.setX(Px);
  theMomentumDirection.setY(Py);
  theMomentumDirection.setZ(Pz);
}

inline
 const G4ThreeVector* G4ParticleChangeForMSC::GetMomentumDirection() const
{
  return &theMomentumDirection;
}

inline
 const G4ThreeVector* G4ParticleChangeForMSC::GetProposedMomentumDirection() const
{
  return &theMomentumDirection;
}

inline
 void G4ParticleChangeForMSC::SetProposedPosition(const G4ThreeVector& P)
{
  thePosition = P;
}

inline
 const G4ThreeVector* G4ParticleChangeForMSC::GetPosition() const
{
  return &thePosition;
}

inline
 const G4ThreeVector* G4ParticleChangeForMSC::GetProposedPosition() const
{
  return &thePosition;
}

inline
 void G4ParticleChangeForMSC::ProposePosition(const G4ThreeVector& P)
{
  thePosition = P;
}


inline void G4ParticleChangeForMSC::Initialize(const G4Track& track)
{
  theStatusChange = track.GetTrackStatus();
  theMomentumDirection = track.GetMomentumDirection();
  thePosition = track.GetPosition();
}

