//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// G4ParticleDefinition inline methods implementation
//
// Authors: G.Cosmo, 2 December 1995 - Design, based on object model
//          M.Asai, 29 January 1996 - First implementation
// --------------------------------------------------------------------

inline 
G4int G4ParticleDefinition::GetInstanceID() const
{ 
  return g4particleDefinitionInstanceID; 
}

inline
G4bool G4ParticleDefinition::GetPDGStable() const
{
  if(IsGeneralIon())
  { return (GetIonLifeTime()<0.); }
  else
  { return thePDGStable; }
}

inline
G4double G4ParticleDefinition::GetPDGLifeTime() const
{
  return thePDGLifeTime;
}

inline 
G4double G4ParticleDefinition::GetIonLifeTime() const
{
  //-- No longer needed to access to G4IonTable.
  //-- Method GetIonLifeTime() itself is kept for compatibility

  return thePDGLifeTime;
}

inline 
G4ParticleTable* G4ParticleDefinition::GetParticleTable() const
{ 
  return theParticleTable; 
}

inline
G4DecayTable* G4ParticleDefinition::GetDecayTable() const
{ 
  return theDecayTable; 
}

inline
void G4ParticleDefinition::SetDecayTable(G4DecayTable* aDecayTable) 
{ 
  theDecayTable = aDecayTable; 
}

inline 
void G4ParticleDefinition::SetVerboseLevel(G4int value)
{
  verboseLevel = value;
}

inline 
G4int G4ParticleDefinition::GetVerboseLevel() const
{
  return verboseLevel;
}

inline
G4ProcessManager* G4ParticleDefinition::GetMasterProcessManager() const
{
  return theProcessManagerShadow;
}

inline
void G4ParticleDefinition::SetMasterProcessManager( G4ProcessManager* aNewPM )
{
  theProcessManagerShadow = aNewPM;
}

inline
G4int G4ParticleDefinition::GetQuarkContent(G4int flavor) const 
{
  G4int content = 0; 
  if ((flavor>0) && (flavor<=NumberOfQuarkFlavor))
  {
    content = theQuarkContent[flavor-1];
  }
  else
  {
#ifdef G4VERBOSE
    if (verboseLevel >0)
    {
      std::ostringstream message;
      message << "Invalid Quark Flavor: " << flavor;
      G4Exception("G4ParticleDefinition::GetQuarkContent()",
                  "InvalidFlavor", JustWarning, message);
    }
#endif
  }
  return content;  
}

inline
G4int G4ParticleDefinition::GetAntiQuarkContent(G4int flavor) const 
{
  G4int content = 0;
  if ((flavor>0) && (flavor<=NumberOfQuarkFlavor))
  {
    content = theAntiQuarkContent[flavor-1];
  }
  else
  {
#ifdef G4VERBOSE
    if (verboseLevel >0)
    {
      std::ostringstream message;
      message << "Invalid Quark Flavor: " << flavor;
      G4Exception("G4ParticleDefinition::GetAntiQuarkContent()",
                  "InvalidFlavor", JustWarning, message);
    }
#endif
  }  
  return content;
}

inline 
void G4ParticleDefinition::SetParticleSubType(const G4String& subtype)
{
  theParticleSubType = subtype;
}
 
inline 
void G4ParticleDefinition::SetAntiPDGEncoding(G4int aEncoding)
{ 
  theAntiPDGEncoding = aEncoding; 
}

inline 
G4bool G4ParticleDefinition::GetApplyCutsFlag() const
{
  return fApplyCutsFlag;
}

inline
void G4ParticleDefinition::SetAtomicNumber(G4int i)
{
  theAtomicNumber = i;
}

inline
G4int G4ParticleDefinition::GetAtomicNumber() const
{
  return theAtomicNumber;
}

inline
void G4ParticleDefinition::SetAtomicMass(G4int i)
{
  theAtomicMass = i;
}

inline
G4int G4ParticleDefinition::GetAtomicMass() const
{
  return theAtomicMass;
}

inline 
void  G4ParticleDefinition::SetPDGMagneticMoment(G4double magneticMoment)
{
  thePDGMagneticMoment = magneticMoment;
}

inline      
G4bool G4ParticleDefinition::IsGeneralIon() const
{
  return isGeneralIon;
}

inline
G4bool G4ParticleDefinition::IsMuonicAtom() const
{
  return isMuonicAtom;
}

inline
G4int G4ParticleDefinition::GetParticleDefinitionID() const
{
  return g4particleDefinitionInstanceID; 
}

inline
G4bool G4ParticleDefinition::IsHypernucleus() const
{
  if ( GetNumberOfLambdasInHypernucleus() > 0 ) return true;
  return false;
}

inline
G4int G4ParticleDefinition::GetNumberOfLambdasInHypernucleus() const
{
  // PDG code of hypernuclei: 10LZZZAAAI
  G4int numberOfLambdas = 0;
  if ( thePDGEncoding > 0 ) numberOfLambdas = (thePDGEncoding/10000000)%100;
  return numberOfLambdas;
}

inline
G4bool G4ParticleDefinition::IsAntiHypernucleus() const
{
  if ( GetNumberOfAntiLambdasInAntiHypernucleus() > 0 ) return true;
  return false;
}

inline
G4int G4ParticleDefinition::GetNumberOfAntiLambdasInAntiHypernucleus() const
{
  // PDG code of anti-hypernuclei: -10LZZZAAAI
  G4int numberOfAntiLambdas = 0;
  if ( thePDGEncoding < 0 ) numberOfAntiLambdas = (std::abs(thePDGEncoding)/10000000)%100;
  return numberOfAntiLambdas;
}
