//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// 
// John Allison  31st December 1997.
// Parameters associated with the modeling of GEANT4 objects.

inline G4bool G4ModelingParameters::IsWarning () const {
  return fWarning;
}

inline const G4VisAttributes*
G4ModelingParameters::GetDefaultVisAttributes () const {
  return fpDefaultVisAttributes;
}

inline G4ModelingParameters::DrawingStyle
G4ModelingParameters::GetDrawingStyle () const {
  return fDrawingStyle;
}

inline G4int G4ModelingParameters::GetNumberOfCloudPoints () const {
  return fNumberOfCloudPoints;
}

inline G4bool G4ModelingParameters::IsCulling () const {
  return fCulling;
}

inline G4bool G4ModelingParameters::IsCullingInvisible () const {
  return fCullInvisible;
}

inline G4bool G4ModelingParameters::IsDensityCulling () const {
  return fDensityCulling;
}

inline G4double G4ModelingParameters::GetVisibleDensity () const {
  return fVisibleDensity;
}

inline G4bool G4ModelingParameters::IsCullingCovered () const {
  return fCullCovered;
}

inline G4int G4ModelingParameters::GetCBDAlgorithmNumber () const {
  return fCBDAlgorithmNumber;
}

inline const std::vector<G4double>& G4ModelingParameters::GetCBDParameters () const {
  return fCBDParameters;
}

inline G4bool G4ModelingParameters::IsExplode () const {
  return fExplodeFactor > 1.;
}

inline G4double G4ModelingParameters::GetExplodeFactor () const {
  return fExplodeFactor;
}

inline const G4Point3D& G4ModelingParameters::GetExplodeCentre () const {
  return fExplodeCentre;
}

inline G4int G4ModelingParameters::GetNoOfSides () const {
  return fNoOfSides;
}

inline G4DisplacedSolid* G4ModelingParameters::GetSectionSolid () const
{return fpSectionSolid;}

inline G4DisplacedSolid* G4ModelingParameters::GetCutawaySolid () const
{return fpCutawaySolid;}

inline const G4Event* G4ModelingParameters::GetEvent () const
{return fpEvent;}

inline const std::vector<G4ModelingParameters::VisAttributesModifier>&
G4ModelingParameters::GetVisAttributesModifiers() const {
  return fVisAttributesModifiers;
}

inline void G4ModelingParameters::SetWarning (G4bool value) {
  fWarning = value;
}

inline void G4ModelingParameters::SetDefaultVisAttributes
(const G4VisAttributes* pDefaultVisAttributes) {
  fpDefaultVisAttributes = pDefaultVisAttributes;
}

inline void
G4ModelingParameters::SetDrawingStyle
(G4ModelingParameters::DrawingStyle style) {
  fDrawingStyle = style;
}

inline void G4ModelingParameters::SetNumberOfCloudPoints (G4int n) {
  fNumberOfCloudPoints = n;
}

inline void G4ModelingParameters::SetCulling (G4bool value) {
  fCulling = value;
}

inline void G4ModelingParameters::SetCullingInvisible (G4bool value) {
  fCullInvisible = value;
}

inline void G4ModelingParameters::SetDensityCulling (G4bool value) {
  fDensityCulling = value;
}

inline void G4ModelingParameters::SetCullingCovered (G4bool value) {
  fCullCovered = value;
}

inline void G4ModelingParameters::SetCBDAlgorithmNumber (G4int n) {
  fCBDAlgorithmNumber = n;
}

inline void G4ModelingParameters::SetCBDParameters (const std::vector<G4double>& p) {
  fCBDParameters = p;
}

inline void G4ModelingParameters::SetExplodeFactor (G4double explodeFactor) {
  fExplodeFactor = explodeFactor;
}

inline void G4ModelingParameters::SetExplodeCentre
(const G4Point3D& explodeCentre) {
  fExplodeCentre = explodeCentre;
}

inline void G4ModelingParameters::SetEvent(const G4Event* pEvent) {
  fpEvent = pEvent;
}

inline void G4ModelingParameters::SetVisAttributesModifiers
(const std::vector<G4ModelingParameters::VisAttributesModifier>& vams) {
  fVisAttributesModifiers = vams;
}
