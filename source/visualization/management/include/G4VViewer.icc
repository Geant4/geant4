//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// 
// John Allison  30th December 1996

inline void G4VViewer::Initialise () {}

inline void G4VViewer::ResetView () {
  fVP = fDefaultVP;
}

inline void G4VViewer::RefreshView () {
  SetView(); ClearView(); DrawView();
}

inline G4int G4VViewer::GetViewId () const {
  return fViewId;
}

inline const G4String& G4VViewer::GetName () const {
  return fName;
}

inline const G4String& G4VViewer::GetShortName () const {
  return fShortName;
}

inline G4VSceneHandler* G4VViewer::GetSceneHandler () const {
  return &fSceneHandler;
}

inline const G4ViewParameters& G4VViewer::GetViewParameters () const {
  return fVP;
}

inline const G4ViewParameters& G4VViewer::GetDefaultViewParameters () const {
  return fDefaultVP;
}

inline const std::vector<G4ModelingParameters::VisAttributesModifier>*
  G4VViewer::GetPrivateVisAttributesModifiers() const {
    return 0;
}

inline void G4VViewer::SetDefaultViewParameters (const G4ViewParameters& vp) {
  fDefaultVP = vp;
}

inline const G4VisAttributes* G4VViewer::GetApplicableVisAttributes
(const G4VisAttributes* pVisAttribs) const
{
  // If pVisAttribs is zero, pick up the default vis attributes from
  // the view parameters.
  if (!pVisAttribs)
  pVisAttribs = GetViewParameters().GetDefaultVisAttributes();
  return pVisAttribs;
}

inline void G4VViewer::SetNeedKernelVisit (G4bool need) {
  fNeedKernelVisit = need;
}
