//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// Author: Ivana Hrivnacova, 26/08/2021 (ivana@ipno.in2p3.fr)

#include "G4AnalysisUtilities.hh"

#include "tools/rcsv_histo"

//_____________________________________________________________________________
template <typename HT>
inline
G4String G4CsvHnRFileManager<HT>::GetHnFileName(
  const G4String& hnType, const G4String& hnName,
  const G4String& fileName, G4bool isUserFileName) const
{
  if ( isUserFileName ) {
    return fRFileManager->GetFullFileName(fileName);
  }
  return fRFileManager->GetHnFileName(hnType, hnName);
}

//_____________________________________________________________________________
template <typename HT>
inline
HT*  G4CsvHnRFileManager<HT>::ReadT(
  std::istream& htFile, const G4String& fileName, std::string_view inFunction)
{
  tools::rcsv::histo handler(htFile);
  std::string objectTypeInFile;
  void* object;
  auto verbose = false;
  if ( ! handler.read(G4cout, objectTypeInFile, object, verbose) ) {
    G4Analysis::Warn(
      "Cannot get " + G4Analysis::GetHnType<HT>() + " in file " + fileName,
      fkClass, inFunction);
    return nullptr;
  }
  if (objectTypeInFile != HT::s_class()) {
    G4Analysis::Warn(
      "Object type read in " + G4Analysis::GetHnType<HT>() +" does not match",
      fkClass, inFunction);
    return nullptr;
  }

  return static_cast<HT*>(object);
}

//_____________________________________________________________________________
template <typename HT>
inline
HT* G4CsvHnRFileManager<HT>::Read(
  const G4String& htName, const G4String& fileName, const G4String& dirName,
  G4bool isUserFileName)
{
  // Get file name
  auto htFileName =
    GetHnFileName(G4Analysis::GetHnType<HT>(), htName, fileName, isUserFileName);

  // Update directory path
  if ( ! dirName.empty() ) {
    htFileName = "./" + dirName + "/" + htFileName;
  }

  std::ifstream htFile(htFileName);
  if ( ! htFile.is_open() ) {
    G4Analysis::Warn("Cannot open file " + htFileName, fkClass, "Read");
    return nullptr;
  }

  auto ht = ReadT(htFile, htFileName, "Read");
  return ht;
}
