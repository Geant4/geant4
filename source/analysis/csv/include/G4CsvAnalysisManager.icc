//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: G4CsvAnalysisManager.hh 70604 2013-06-03 11:27:06Z ihrivnac $

#include "G4CsvNtupleManager.hh"
#include "G4CsvFileManager.hh"

#include "tools/wcsv_histo"

//_____________________________________________________________________________
template <>
inline 
G4bool G4CsvAnalysisManager::WriteT(const std::vector<tools::histo::p1d*>& htVector,
                                    const std::vector<G4HnInformation*>& hnVector,
                                    const G4String& hnType)
{
  for ( G4int i=0; i<G4int(htVector.size()); ++i ) {
    auto info = hnVector[i];
    auto activation = info->GetActivation();
    auto name = info->GetName();
    // skip writing if activation is enabled and H1 is inactivated
    if ( fState.GetIsActivation() && ( ! activation ) ) continue; 
    auto ht = htVector[i];
    auto fileName = fFileManager->GetHnFileName(hnType, name);
    std::ofstream hnFile(fileName);

    // Do nothing if there is no file
    if ( ! hnFile.is_open() ) return false;

    auto result
      = tools::wcsv::pto(hnFile, ht->s_cls(), *ht);

    if ( ! result ) {
      G4ExceptionDescription description;
      description << "      " << "saving " << hnType << " " << name << " failed";
      G4Exception("G4CsvAnalysisManager::Write()",
                "Analysis_W022", JustWarning, description);
      return false;       
    } 
    hnFile.close();
#ifdef G4VERBOSE
    if ( fState.GetVerboseL1() ) 
      fState.GetVerboseL1()->Message("write", "file", fileName);
#endif
    fFileManager->LockHistoDirectoryName();
  }

  return true;
}  

//_____________________________________________________________________________
template <>
inline 
G4bool G4CsvAnalysisManager::WriteT(const std::vector<tools::histo::p2d*>& htVector,
                                    const std::vector<G4HnInformation*>& hnVector,
                                    const G4String& hnType)
{
  for ( G4int i=0; i<G4int(htVector.size()); ++i ) {
    auto info = hnVector[i];
    auto activation = info->GetActivation();
    auto name = info->GetName();
    // skip writing if activation is enabled and H1 is inactivated
    if ( fState.GetIsActivation() && ( ! activation ) ) continue; 
    auto ht = htVector[i];
    auto fileName = fFileManager->GetHnFileName(hnType, name);
    std::ofstream hnFile(fileName);

    // Do nothing if there is no file
    if ( ! hnFile.is_open() ) return false;

    auto result
      = tools::wcsv::pto(hnFile, ht->s_cls(), *ht);

    if ( ! result ) {
      G4ExceptionDescription description;
      description << "      " << "saving " << hnType << " " << name << " failed";
      G4Exception("G4CsvAnalysisManager::Write()",
                "Analysis_W022", JustWarning, description);
      return false;       
    } 
    hnFile.close();
#ifdef G4VERBOSE
    if ( fState.GetVerboseL1() ) 
      fState.GetVerboseL1()->Message("write", "file", fileName);
#endif
    fFileManager->LockHistoDirectoryName();
  }

  return true;
}  

//_____________________________________________________________________________
template <typename T>
inline 
G4bool G4CsvAnalysisManager::WriteT(const std::vector<T*>& htVector,
                                    const std::vector<G4HnInformation*>& hnVector,
                                    const G4String& hnType)
{
  for ( G4int i=0; i<G4int(htVector.size()); ++i ) {
    auto info = hnVector[i];
    auto activation = info->GetActivation();
    auto name = info->GetName();
    // skip writing if activation is enabled and H1 is inactivated
    if ( fState.GetIsActivation() && ( ! activation ) ) continue; 
    auto ht = htVector[i];
    auto fileName = fFileManager->GetHnFileName(hnType, name);
    std::ofstream hnFile(fileName);

    // Do nothing if there is no file
    if ( ! hnFile.is_open() ) return false;

    auto result
      = tools::wcsv::hto(hnFile, ht->s_cls(), *ht);
    if ( ! result ) {
      G4ExceptionDescription description;
      description << "      " << "saving " << hnType << " " << name << " failed";
      G4Exception("G4CsvAnalysisManager::Write()",
                "Analysis_W022", JustWarning, description);
      return false;       
    } 
    hnFile.close();
#ifdef G4VERBOSE
    if ( fState.GetVerboseL1() ) 
      fState.GetVerboseL1()->Message("write", "file", fileName);
#endif
    fFileManager->LockHistoDirectoryName();
  }

  return true;
}  

//_____________________________________________________________________________
inline
G4bool G4CsvAnalysisManager::IsOpenFileImpl() const
{
  return fFileManager->IsOpenFile();
}

//_____________________________________________________________________________
inline
tools::wcsv::ntuple* G4CsvAnalysisManager::GetNtuple() const
{
  return fNtupleManager->GetNtuple();
}  

//_____________________________________________________________________________
inline
tools::wcsv::ntuple* G4CsvAnalysisManager::GetNtuple(G4int ntupleId) const
{
  return fNtupleManager->GetNtuple(ntupleId);
}  

//_____________________________________________________________________________
inline
std::vector<tools::wcsv::ntuple*>::iterator G4CsvAnalysisManager::BeginNtuple()
{
  return fNtupleManager->BeginNtuple();
}  

//_____________________________________________________________________________
inline
std::vector<tools::wcsv::ntuple*>::iterator G4CsvAnalysisManager::EndNtuple()
{
  return fNtupleManager->EndNtuple();
}  

//_____________________________________________________________________________
inline
std::vector<tools::wcsv::ntuple*>::const_iterator 
G4CsvAnalysisManager::BeginConstNtuple() const
{
  return fNtupleManager->BeginConstNtuple();
}  

//_____________________________________________________________________________
inline
std::vector<tools::wcsv::ntuple*>::const_iterator 
G4CsvAnalysisManager::EndConstNtuple() const
{
  return fNtupleManager->EndConstNtuple();
}  

//_____________________________________________________________________________
inline
void G4CsvAnalysisManager::SetIsCommentedHeader(G4bool isCommentedHeader)
{
  fNtupleManager->SetIsCommentedHeader(isCommentedHeader);
}  

//_____________________________________________________________________________
inline
void G4CsvAnalysisManager::SetIsHippoHeader(G4bool isHippoHeader)
{
  fNtupleManager->SetIsHippoHeader(isHippoHeader);
}  
