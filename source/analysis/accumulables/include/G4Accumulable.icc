//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//

//
// utilities
//

//
// public functions
//

using namespace G4Accumulables;

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>::G4Accumulable(const G4String& name, T initValue, G4MergeMode mergeMode)
 : G4VAccumulable(name),
   fValue(initValue),
   fInitValue(initValue),
   fMergeMode(mergeMode),
   fMergeFunction(GetMergeFunction<T>(mergeMode))
{}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>::G4Accumulable(T initValue, G4MergeMode mergeMode)
 : G4VAccumulable(),
   fValue(initValue),
   fInitValue(initValue),
   fMergeMode(mergeMode),
   fMergeFunction(GetMergeFunction<T>(mergeMode))
{}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>::G4Accumulable(const G4Accumulable& rhs)
  : G4VAccumulable(rhs),
    fValue(rhs.fValue),
    fInitValue(rhs.fInitValue),
    fMergeMode(rhs.fMergeMode),
    fMergeFunction(rhs.fMergeFunction)
{}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>::~G4Accumulable()
{}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>&
G4Accumulable<T>::operator=(const G4Accumulable<T>& rhs)
{
  // check assignment to self
  if (this == &rhs) return *this;

  // base class assignment
  G4VAccumulable::operator=(rhs);

  // this class data assignment
  fValue = rhs.fValue;
  fInitValue = rhs.fInitValue;
  fMergeMode = rhs.fMergeMode;
  fMergeFunction = rhs.fMergeFunction;

  return *this;
}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>&
G4Accumulable<T>::operator+=(const G4Accumulable<T>& rhs)
{
  // only update the value from rhs
  fValue += rhs.fValue;
  return *this;
}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>&
G4Accumulable<T>::operator*=(const G4Accumulable<T>& rhs)
{
  // only update the value from rhs
  fValue *= rhs.fValue;
  return *this;
}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>&
G4Accumulable<T>::operator=(const T& value)
{
  // only update the value
  fValue = value;
  return *this;
}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>&
G4Accumulable<T>::operator+=(const T& value)
{
  // only update the value
  fValue += value;
  return *this;
}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>&
G4Accumulable<T>::operator*=(const T& value)
{
  // only update the value from rhs
  fValue *= value;
  return *this;
}

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>  
G4Accumulable<T>::operator++(int)
{
  // postfix increment
  G4Accumulable<T> temp = *this;
  fValue++;
  return temp;
} 

//_____________________________________________________________________________
template <typename T> 
G4Accumulable<T>&
G4Accumulable<T>::operator++()
{
  // prefix increment
  fValue++;
  return *this;
}

//_____________________________________________________________________________
template <typename T> 
void G4Accumulable<T>::Merge(const G4VAccumulable& other)
{
  // G4cout << "Merging other: " << other.GetName() << " " << static_cast<const G4Accumulable<T>&>(other).fValue << G4endl;
  // G4cout << "    to master: " << fName << " " << fValue << G4endl;
  fValue = fMergeFunction(fValue, static_cast<const G4Accumulable<T>&>(other).fValue);
  // G4cout << "    new value: " << fName << " " << fValue << G4endl;
}

//_____________________________________________________________________________
template <typename T> 
void G4Accumulable<T>::Reset()
{
  fValue = fInitValue;
}

//_____________________________________________________________________________
template <typename T> 
T  G4Accumulable<T>::GetValue() const
{
  return fValue;
}
