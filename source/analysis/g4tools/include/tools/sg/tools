// Copyright (C) 2010, Guy Barrand. All rights reserved.
// See the file tools.license for terms.

#ifndef tools_sg_tools
#define tools_sg_tools

#include "enums"
#include "strings"
#include "separator"
#include "matrix"
#include "text_hershey"
#include "base_freetype"
#include "vertices"
#include "markers"

#include "../lina/vec3f"

namespace tools {
namespace sg {

inline void add_string(
 separator& a_sep
,const std::string& a_font
,const std::string& a_encoding
,bool //a_smoothing
,const std::string& a_string  
,float a_x,float a_y,float a_z
,const vec3f& a_X
,const vec3f& a_Y
,float a_size    
,hjust a_hjust
,vjust a_vjust
,const base_freetype& a_ttf
){
  if(a_string.empty()) return;

  matrix* tsf = new matrix;
  
 {tsf->mul_translate(a_x,a_y,a_z);
  vec3f X = a_X;
  vec3f Y = a_Y;
  X.normalize();
  Y.normalize();
  vec3f Z;X.cross(Y,Z);
  Z.cross(X,Y);
  mat4f r(X.v0(),Y.v0(),Z.v0(),0, //first row
                 X.v1(),Y.v1(),Z.v1(),0,
                 X.v2(),Y.v2(),Z.v2(),0,
                 0,0,0,1);
  tsf->mul_mtx(r);
  tsf->mul_scale(a_size,a_size,1);} //applied first on GL
  
  a_sep.add(tsf);

  if(a_font==font_hershey()) {

    text_hershey* text = new text_hershey;
    text->encoding.value(a_encoding);
    text->strings.add(a_string);
    text->hjust.value(a_hjust);
    text->vjust.value(a_vjust);
    a_sep.add(text);

  } else {

    base_freetype* text = base_freetype::create(a_ttf);
    
    text->font = a_font;
    
    //text->modeling.value(font_outline);
    //text->encoding.value(a_encoding);
    //text->smooting.value(a_smoothing);
    text->strings.add(a_string);
    text->hjust.value(a_hjust);
    text->vjust.value(a_vjust);
  //text->modeling = font_outline;
    a_sep.add(text);

  }

}

inline void add_string_opt(
 separator& a_sep
,const std::string& a_font
,const std::string& a_encoding
,bool //a_smoothing
,const std::string& a_string  
,float a_x,float a_y,float a_z
,mat4f& a_scale_rot
,hjust a_hjust
,vjust a_vjust
,const base_freetype& a_ttf
){
  //used in axis::update_sg()
  if(a_string.empty()) return;

  matrix* tsf = new matrix;
  tsf->mul_translate(a_x,a_y,a_z);
  tsf->mul_mtx(a_scale_rot);
  a_sep.add(tsf);

  if(a_font==font_hershey()) {

    text_hershey* text = new text_hershey;
    text->encoding.value(a_encoding);
    text->strings.add(a_string);
    text->hjust.value(a_hjust);
    text->vjust.value(a_vjust);
    a_sep.add(text);

  } else {

    base_freetype* text = base_freetype::create(a_ttf);
    
    text->font = a_font;
    
    //text->modeling.value(font_outline);
    //text->encoding.value(a_encoding);
    //text->smooting.value(a_smoothing);
    text->strings.add(a_string);
    text->hjust.value(a_hjust);
    text->vjust.value(a_vjust);
    a_sep.add(text);

  }

}

inline void add_markers(separator& a_sep,size_t a_num,vec3f* a_points,marker_style a_style,float a_size) {
  if(a_num<=0) return;
/*if(a_style==marker_dot) {
    vertices* vtxs = new vertices;
    vtxs->mode = gl::points();
    for(size_t index=0;index<a_num;index++) vtxs->add(a_points[index]);
    a_sep.add(vtxs);
  } else {*/
    markers* vtxs = new markers;
    vtxs->size = a_size;
    vtxs->style = a_style; 
    for(size_t index=0;index<a_num;index++) vtxs->add(a_points[index]);
    a_sep.add(vtxs);
  //}
}

inline void add_markers(separator& a_sep,const std::vector<float>& a_xyzs,marker_style a_style,float a_size) {
  size_t num = a_xyzs.size()/3;
  if(!num) return;
/*if(a_style==marker_dot) {
    vertices* vtxs = new vertices;
    vtxs->mode = gl::points();
    vtxs->xyzs = a_xyzs;
    a_sep.add(vtxs);
  } else {*/
    markers* vtxs = new markers;
    vtxs->size = a_size;
    vtxs->style = a_style;
    vtxs->xyzs = a_xyzs;
    a_sep.add(vtxs);
//  }
}

}}

#endif
