//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//

// Author: Ivana Hrivnacova, 04/10/2016  (ivana@ipno.in2p3.fr)

using std::to_string;

//_____________________________________________________________________________
template <>
inline G4bool G4RootPNtupleManager::FillNtupleTColumn(
  G4int ntupleId, G4int columnId, const std::string& value)
{
  if ( fState.GetIsActivation() && ( ! GetActivation(ntupleId) ) ) {
    G4cout << "Skipping FillNtupleIColumn for " << ntupleId << G4endl;
    return false;
  }

  if ( IsVerbose(G4Analysis::kVL4) ) {
    Message(G4Analysis::kVL4, "fill", "pntuple T column",
       " ntupleId " + to_string(ntupleId) + " columnId " + to_string(columnId) +
       " value " + G4Analysis::ToString(value));
  }

  // Creating ntuples on workers is triggered with the first FillColumn
  // or AddRow (in only columns of vector type call)
  CreateNtuplesIfNeeded();

  auto ntuple = GetNtupleInFunction(ntupleId, "FillNtupleTColumn");
  if (ntuple == nullptr) return false;

  auto index = columnId - fFirstNtupleColumnId;
  if ( index < 0 || index >= G4int(ntuple->columns().size()) ) {
    G4Analysis::Warn(
      "ntupleId " + to_string(ntupleId) + " columnId " + to_string(columnId) +
      " does not exist.",
      fkClass, "FillNtupleTColumn");
    return false;
  }

  auto icolumn =  ntuple->columns()[index];
  auto column = dynamic_cast<tools::wroot::base_pntuple::column_string* >(icolumn);
  if (column == nullptr) {
    G4Analysis::Warn(
      " Column type does not match: ntupleId " + to_string(ntupleId) +
      " columnId " + to_string(columnId) + " value " + value,
      fkClass, "FillNtupleTColumn");
    return false;
  }

  column->fill(value);

  if ( IsVerbose(G4Analysis::kVL4) ) {
    Message(G4Analysis::kVL4, "done fill", "pntuple T column",
       " ntupleId " + to_string(ntupleId) +
       " columnId " + to_string(columnId) +
       " value " + value);
  }

  return true;
}

//_____________________________________________________________________________
template <typename T>
G4bool G4RootPNtupleManager::FillNtupleTColumn(
  G4int ntupleId, G4int columnId, const T& value)
{
  // Creating ntuples on workers is triggered with the first FillColumn
  // or AddRow (in only columns of vector type call)
  CreateNtuplesIfNeeded();

  if ( fState.GetIsActivation() && ( ! GetActivation(ntupleId) ) ) {
    G4cout << "Skipping FillNtupleIColumn for " << ntupleId << G4endl;
    return false;
  }

  if ( IsVerbose(G4Analysis::kVL4) ) {
    Message(G4Analysis::kVL4, "fill", "pntuple T column",
       " ntupleId " + to_string(ntupleId) +
       " columnId " + to_string(columnId) +
       " value " + G4Analysis::ToString(value));
  }

  // get ntuple
  auto ntuple = GetNtupleInFunction(ntupleId, "FillNtupleTColumn");
  if ( ! ntuple ) return false;

  // get generic column
  auto index = columnId - fFirstNtupleColumnId;
  if ( index < 0 || index >= G4int(ntuple->columns().size()) ) {
    G4Analysis::Warn(
      "ntupleId " + to_string(ntupleId) + " columnId " + to_string(columnId) +
      " does not exist.",
      fkClass, "FillNtupleTColumn");
    return false;
  }
  auto icolumn =  ntuple->columns()[index];

  // get column and check its type
  auto column = dynamic_cast<tools::wroot::base_pntuple::column<T>* >(icolumn);
  if ( ! column ) {
    G4Analysis::Warn(
      " Column type does not match: ntupleId " + to_string(ntupleId) +
      " columnId " + to_string(columnId) + " value " + G4Analysis::ToString(value),
      fkClass, "FillNtupleTColumn");
    return false;
  }

  column->fill(value);

  if ( IsVerbose(G4Analysis::kVL4) ) {
    Message(G4Analysis::kVL4, "done fill", "pntuple T column",
       " ntupleId " + to_string(ntupleId) +
       " columnId " + to_string(columnId) +
       " value " + G4Analysis::ToString(value));
  }

  return true;
}

//_____________________________________________________________________________
template <typename T>
G4bool G4RootPNtupleManager::FillNtupleTColumn(G4int columnId, const T& value) {
  return FillNtupleTColumn(0, columnId, value);
}
