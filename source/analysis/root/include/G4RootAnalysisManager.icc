//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: G4RootAnalysisManager.hh 70604 2013-06-03 11:27:06Z ihrivnac $

#include "G4RootNtupleManager.hh"
#include "G4RootFileManager.hh"

#include "tools/wroot/to"
#include "tools/wroot/file"

//_____________________________________________________________________________
template <typename T>
inline 
G4bool G4RootAnalysisManager::WriteT(const std::vector<T*>& htVector,
                                     const std::vector<G4HnInformation*>& hnVector,
                                     tools::wroot::directory* directory,
                                     const G4String& hnType)
{
  // Do nothing if there is no file
  if ( ! directory ) return true;

  for ( G4int i=0; i<G4int(htVector.size()); ++i ) {
    auto info = hnVector[i];
    auto activation = info->GetActivation();
    auto name = info->GetName();
    // skip writing if activation is enabled and H1 is inactivated
    if ( fState.GetIsActivation() && ( ! activation ) ) continue; 
    auto ht = htVector[i];
#ifdef G4VERBOSE
      if ( fState.GetVerboseL3() ) 
        fState.GetVerboseL3()->Message("write", hnType, name);
#endif
    G4bool result
      = to(*directory, *ht, name);
    if ( ! result ) {
      G4ExceptionDescription description;
      description << "      " << "saving " << hnType << " " <<  name << " failed";
      G4Exception("G4RootAnalysisManager::Write()",
                "Analysis_W022", JustWarning, description);
      return false;       
    } 
  }

  return true;
}

//_____________________________________________________________________________
inline
G4bool G4RootAnalysisManager::IsOpenFileImpl() const
{
  return fFileManager->IsOpenFile();
}

//_____________________________________________________________________________
inline
tools::wroot::ntuple* G4RootAnalysisManager::GetNtuple() const
{
  return fNtupleManager->GetNtuple();
}  

//_____________________________________________________________________________
inline
tools::wroot::ntuple* G4RootAnalysisManager::GetNtuple(G4int ntupleId) const
{
  return fNtupleManager->GetNtuple(ntupleId);
}  

//_____________________________________________________________________________
inline
std::vector<tools::wroot::ntuple*>::iterator G4RootAnalysisManager::BeginNtuple()
{
  return fNtupleManager->BeginNtuple();
}  

//_____________________________________________________________________________
inline
std::vector<tools::wroot::ntuple*>::iterator G4RootAnalysisManager::EndNtuple()
{
  return fNtupleManager->EndNtuple();
}  

//_____________________________________________________________________________
inline
std::vector<tools::wroot::ntuple*>::const_iterator 
G4RootAnalysisManager::BeginConstNtuple() const
{
  return fNtupleManager->BeginConstNtuple();
}  

//_____________________________________________________________________________
inline
std::vector<tools::wroot::ntuple*>::const_iterator 
G4RootAnalysisManager::EndConstNtuple() const
{
  return fNtupleManager->EndConstNtuple();
}  
