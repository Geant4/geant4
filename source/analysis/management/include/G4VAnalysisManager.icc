//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//

#include "G4HnManager.hh"
#include "G4NtupleBookingManager.hh"
#include "G4VNtupleManager.hh"
#include "G4VFileManager.hh"

//_____________________________________________________________________________
inline
void G4VAnalysisManager::Message(
  G4int level, const G4String& action, const G4String& objectType,
  const G4String& objectName, G4bool success) const
{
  fState.Message(level, action, objectType, objectName, success);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillH1(G4int id, G4double value, G4double weight)
{
  return fVH1Manager->Fill(id, {{value}}, weight);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillH2(G4int id,
                                  G4double xvalue, G4double yvalue,
                                  G4double weight)
{
  return fVH2Manager->Fill(id, {{xvalue, yvalue}}, weight);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillH3(G4int id,
                             G4double xvalue, G4double yvalue, G4double zvalue,
                             G4double weight)
{
  return fVH3Manager->Fill(id, { {xvalue, yvalue, zvalue}}, weight);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillP1(G4int id, G4double xvalue, G4double yvalue,
                                  G4double weight)
{
  return fVP1Manager->Fill(id, {{xvalue, yvalue}}, weight);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillP2(G4int id,
                             G4double xvalue, G4double yvalue, G4double zvalue,
                             G4double weight)
{
  return fVP2Manager->Fill(id, {{xvalue, yvalue, zvalue}}, weight);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleIColumn(G4int columnId, G4int value)
{
  return fVNtupleManager->FillNtupleIColumn(columnId, value);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleFColumn(G4int columnId, G4float value)
{
  return fVNtupleManager->FillNtupleFColumn(columnId, value);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleDColumn(G4int columnId, G4double value)
{
  return fVNtupleManager->FillNtupleDColumn(columnId, value);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleSColumn(G4int columnId, const G4String& value)
{
  return fVNtupleManager->FillNtupleSColumn(columnId, value);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::AddNtupleRow()
{
  return fVNtupleManager->AddNtupleRow();
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleIColumn(G4int ntupleId, G4int columnId,
                                            G4int value)
{
  return fVNtupleManager->FillNtupleIColumn(ntupleId, columnId, value);
}
//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleFColumn(G4int ntupleId, G4int columnId,
                                            G4float value)
{
  return fVNtupleManager->FillNtupleFColumn(ntupleId, columnId, value);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleDColumn(G4int ntupleId, G4int columnId,
                                            G4double value)
{
  return fVNtupleManager->FillNtupleDColumn(ntupleId, columnId, value);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::FillNtupleSColumn(G4int ntupleId, G4int columnId,
                                            const G4String& value)
{
  return fVNtupleManager->FillNtupleSColumn(ntupleId, columnId, value);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::AddNtupleRow(G4int ntupleId)
{
  return fVNtupleManager->AddNtupleRow(ntupleId);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetActivation() const
{
  return fState.GetIsActivation();
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH1Id(const G4String& name, G4bool warn) const
{
  return fVH1Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH2Id(const G4String& name, G4bool warn) const
{
  return fVH2Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH3Id(const G4String& name, G4bool warn) const
{
  return fVH3Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetP1Id(const G4String& name, G4bool warn) const
{
  return fVP1Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetP2Id(const G4String& name, G4bool warn) const
{
  return fVP2Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH1Nbins(G4int id) const
{
  return fVH1Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH1Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH1Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH1Xmax(G4int id) const
{
  return fVH1Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH1Width(G4int id) const
{
  return fVH1Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH2Nxbins(G4int id) const
{
  return fVH2Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH2Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2Xmax(G4int id) const
{
  return fVH2Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2XWidth(G4int id) const
{
  return fVH2Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH2Nybins(G4int id) const
{
  return fVH2Manager->GetNbins(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH2Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2Ymax(G4int id) const
{
  return fVH2Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2YWidth(G4int id) const
{
  return fVH2Manager->GetWidth(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH3Nxbins(G4int id) const
{
  return fVH3Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH3Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3Xmax(G4int id) const
{
  return fVH3Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3XWidth(G4int id) const
{
  return fVH3Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH3Nybins(G4int id) const
{
  return fVH3Manager->GetNbins(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH3Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3Ymax(G4int id) const
{
  return fVH3Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3YWidth(G4int id) const
{
  return fVH3Manager->GetWidth(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetH3Nzbins(G4int id) const
{
  return fVH3Manager->GetNbins(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3Zmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH3Manager->GetMinValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3Zmax(G4int id) const
{
  return fVH3Manager->GetMaxValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3ZWidth(G4int id) const
{
  return fVH3Manager->GetWidth(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetP1Nbins(G4int id) const
{
  return fVP1Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP1Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP1Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP1Xmax(G4int id) const
{
  return fVP1Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP1XWidth(G4int id) const
{
  return fVP1Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP1Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP1Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP1Ymax(G4int id) const
{
  return fVP1Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetP2Nxbins(G4int id) const
{
  return fVP2Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP2Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2Xmax(G4int id) const
{
  return fVP2Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2XWidth(G4int id) const
{
  return fVP2Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetP2Nybins(G4int id) const
{
  return fVP2Manager->GetNbins(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP2Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2Ymax(G4int id) const
{
  return fVP2Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2YWidth(G4int id) const
{
  return fVP2Manager->GetWidth(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2Zmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP2Manager->GetMinValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2Zmax(G4int id) const
{
  return fVP2Manager->GetMaxValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH1Name(G4int id) const
{
  return fH1HnManager->GetName(id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH1Unit(G4int id) const
{
  return fH1HnManager->GetUnit(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH1Activation(G4int id) const
{
  return fH1HnManager->GetActivation(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH1Ascii(G4int id) const
{
  return fH1HnManager->GetAscii(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH1Plotting(G4int id) const
{
  return fH1HnManager->GetPlotting(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH2Name(G4int id) const
{
  return fH2HnManager->GetName(id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2XUnit(G4int id) const
{
  return fH2HnManager->GetUnit(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH2YUnit(G4int id) const
{
  return fH2HnManager->GetUnit(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH2Activation(G4int id) const
{
  return fH2HnManager->GetActivation(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH2Ascii(G4int id) const
{
  return fH2HnManager->GetAscii(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH2Plotting(G4int id) const
{
  return fH2HnManager->GetPlotting(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH3Name(G4int id) const
{
  return fH3HnManager->GetName(id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3XUnit(G4int id) const
{
  return fH3HnManager->GetUnit(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3YUnit(G4int id) const
{
  return fH3HnManager->GetUnit(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetH3ZUnit(G4int id) const
{
  return fH3HnManager->GetUnit(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH3Activation(G4int id) const
{
  return fH3HnManager->GetActivation(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH3Ascii(G4int id) const
{
  return fH3HnManager->GetAscii(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH3Plotting(G4int id) const
{
  return fH3HnManager->GetPlotting(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP1Name(G4int id) const
{
  return fP1HnManager->GetName(id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP1XUnit(G4int id) const
{
  return fP1HnManager->GetUnit(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP1YUnit(G4int id) const
{
  return fP1HnManager->GetUnit(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP1Activation(G4int id) const
{
  return fP1HnManager->GetActivation(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP1Ascii(G4int id) const
{
  return fP1HnManager->GetAscii(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP1Plotting(G4int id) const
{
  return fP1HnManager->GetPlotting(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP2Name(G4int id) const
{
  return fP2HnManager->GetName(id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2XUnit(G4int id) const
{
  return fP2HnManager->GetUnit(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2YUnit(G4int id) const
{
  return fP2HnManager->GetUnit(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisManager::GetP2ZUnit(G4int id) const
{
  return fP2HnManager->GetUnit(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP2Activation(G4int id) const
{
  return fP2HnManager->GetActivation(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP2Ascii(G4int id) const
{
  return fP2HnManager->GetAscii(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP2Plotting(G4int id) const
{
  return fP2HnManager->GetPlotting(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetNtupleActivation(G4int id) const
{
  if ( fVNtupleManager ) {
    return fVNtupleManager->GetActivation(id);
  }
  return fNtupleBookingManager->GetActivation(id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH1Title(G4int id, const G4String& title)
{
  return fVH1Manager->SetTitle(id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH1XAxisTitle(G4int id, const G4String& title)
{
  return fVH1Manager->SetAxisTitle(G4Analysis::kX, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH1YAxisTitle(G4int id, const G4String& title)
{
  return fVH1Manager->SetAxisTitle(G4Analysis::kY, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH1XAxisIsLog(G4int id, G4bool isLog)
{
  return fH1HnManager->SetAxisIsLog(G4Analysis::kX, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH1YAxisIsLog(G4int id, G4bool isLog)
{
  return fH1HnManager->SetAxisIsLog(G4Analysis::kY, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH2Title(G4int id, const G4String& title)
{
  return fVH2Manager->SetTitle(id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH2XAxisTitle(G4int id, const G4String& title)
{
  return fVH2Manager->SetAxisTitle(G4Analysis::kX, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH2YAxisTitle(G4int id, const G4String& title)
{
  return fVH2Manager->SetAxisTitle(G4Analysis::kY, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH2ZAxisTitle(G4int id, const G4String& title)
{
  return fVH2Manager->SetAxisTitle(G4Analysis::kZ, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH2XAxisIsLog(G4int id, G4bool isLog)
{
  return fH2HnManager->SetAxisIsLog(G4Analysis::kX, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH2YAxisIsLog(G4int id, G4bool isLog)
{
  return fH2HnManager->SetAxisIsLog(G4Analysis::kY, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH2ZAxisIsLog(G4int id, G4bool isLog)
{
  return fH2HnManager->SetAxisIsLog(G4Analysis::kZ, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH3Title(G4int id, const G4String& title)
{
  return fVH3Manager->SetTitle(id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH3XAxisTitle(G4int id, const G4String& title)
{
  return fVH3Manager->SetAxisTitle(G4Analysis::kX, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH3YAxisTitle(G4int id, const G4String& title)
{
  return fVH3Manager->SetAxisTitle(G4Analysis::kY, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH3ZAxisTitle(G4int id, const G4String& title)
{
  return fVH3Manager->SetAxisTitle(G4Analysis::kZ, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH3XAxisIsLog(G4int id, G4bool isLog)
{
  return fH3HnManager->SetAxisIsLog(G4Analysis::kX, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH3YAxisIsLog(G4int id, G4bool isLog)
{
  return fH3HnManager->SetAxisIsLog(G4Analysis::kY, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetH3ZAxisIsLog(G4int id, G4bool isLog)
{
  return fH3HnManager->SetAxisIsLog(G4Analysis::kZ, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP1Title(G4int id, const G4String& title)
{
  return fVP1Manager->SetTitle(id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP1XAxisTitle(G4int id, const G4String& title)
{
  return fVP1Manager->SetAxisTitle(G4Analysis::kX, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP1YAxisTitle(G4int id, const G4String& title)
{
  return fVP1Manager->SetAxisTitle(G4Analysis::kY, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP1XAxisIsLog(G4int id, G4bool isLog)
{
  return fP1HnManager->SetAxisIsLog(G4Analysis::kX, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP1YAxisIsLog(G4int id, G4bool isLog)
{
  return fP1HnManager->SetAxisIsLog(G4Analysis::kY, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP2Title(G4int id, const G4String& title)
{
  return fVP2Manager->SetTitle(id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP2XAxisTitle(G4int id, const G4String& title)
{
  return fVP2Manager->SetAxisTitle(G4Analysis::kX, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP2YAxisTitle(G4int id, const G4String& title)
{
  return fVP2Manager->SetAxisTitle(G4Analysis::kY, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP2ZAxisTitle(G4int id, const G4String& title)
{
  return fVP2Manager->SetAxisTitle(G4Analysis::kZ, id, title);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP2XAxisIsLog(G4int id, G4bool isLog)
{
  return fP2HnManager->SetAxisIsLog(G4Analysis::kX, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP2YAxisIsLog(G4int id, G4bool isLog)
{
  return fP2HnManager->SetAxisIsLog(G4Analysis::kY, id, isLog);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::SetP2ZAxisIsLog(G4int id, G4bool isLog)
{
  return fP2HnManager->SetAxisIsLog(G4Analysis::kZ, id, isLog);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH1Title(G4int id) const
{
  return fVH1Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH1XAxisTitle(G4int id) const
{
  return fVH1Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH1YAxisTitle(G4int id) const
{
  return fVH1Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH1XAxisIsLog(G4int id) const
{
  return fH1HnManager->GetAxisIsLog(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH1YAxisIsLog(G4int id) const
{
  return fH1HnManager->GetAxisIsLog(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH2Title(G4int id) const
{
  return fVH2Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH2XAxisTitle(G4int id) const
{
  return fVH2Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH2YAxisTitle(G4int id) const
{
  return fVH2Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH2ZAxisTitle(G4int id) const
{
  return fVH2Manager->GetAxisTitle(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH2XAxisIsLog(G4int id) const
{
  return fH2HnManager->GetAxisIsLog(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH2YAxisIsLog(G4int id) const
{
  return fH2HnManager->GetAxisIsLog(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH2ZAxisIsLog(G4int id) const
{
  return fH2HnManager->GetAxisIsLog(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH3Title(G4int id) const
{
  return fVH3Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH3XAxisTitle(G4int id) const
{
  return fVH3Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH3YAxisTitle(G4int id) const
{
  return fVH3Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetH3ZAxisTitle(G4int id) const
{
  return fVH3Manager->GetAxisTitle(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH3XAxisIsLog(G4int id) const
{
  return fH3HnManager->GetAxisIsLog(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH3YAxisIsLog(G4int id) const
{
  return fH3HnManager->GetAxisIsLog(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetH3ZAxisIsLog(G4int id) const
{
  return fH3HnManager->GetAxisIsLog(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP1Title(G4int id) const
{
  return fVP1Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP1XAxisTitle(G4int id) const
{
  return fVP1Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP1YAxisTitle(G4int id) const
{
  return fVP1Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP1XAxisIsLog(G4int id) const
{
  return fP1HnManager->GetAxisIsLog(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP1YAxisIsLog(G4int id) const
{
  return fP1HnManager->GetAxisIsLog(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP2Title(G4int id) const
{
  return fVP2Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP2XAxisTitle(G4int id) const
{
  return fVP2Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP2YAxisTitle(G4int id) const
{
  return fVP2Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetP2ZAxisTitle(G4int id) const
{
  return fVP2Manager->GetAxisTitle(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP2XAxisIsLog(G4int id) const
{
  return fP2HnManager->GetAxisIsLog(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP2YAxisIsLog(G4int id) const
{
  return fP2HnManager->GetAxisIsLog(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4bool G4VAnalysisManager::GetP2ZAxisIsLog(G4int id) const
{
  return fP2HnManager->GetAxisIsLog(G4Analysis::kZ, id);
}


//_____________________________________________________________________________
inline
G4int G4VAnalysisManager::GetVerboseLevel() const
{
  return fState.GetVerboseLevel();
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetType() const
{
  return fState.GetType();
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisManager::GetFileType() const
{
  return fVFileManager->GetFileType();
}
