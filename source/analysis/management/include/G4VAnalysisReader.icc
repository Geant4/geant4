//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//

#include "G4HnManager.hh"
#include "G4VRFileManager.hh"

//_____________________________________________________________________________
inline
void G4VAnalysisReader::Message(
  G4int level, const G4String& action, const G4String& objectType,
  const G4String& objectName, G4bool success) const
{
  fState.Message(level, action, objectType, objectName, success);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH1Id(const G4String& name, G4bool warn) const
{
  return fVH1Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH2Id(const G4String& name, G4bool warn) const
{
  return fVH2Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH3Id(const G4String& name, G4bool warn) const
{
  return fVH3Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetP1Id(const G4String& name, G4bool warn) const
{
  return fVP1Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetP2Id(const G4String& name, G4bool warn) const
{
  return fVP2Manager->GetId(name, warn);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH1Nbins(G4int id) const
{
  return fVH1Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH1Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH1Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH1Xmax(G4int id) const
{
  return fVH1Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH1Width(G4int id) const
{
  return fVH1Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH2Nxbins(G4int id) const
{
  return fVH2Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH2Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH2Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH2Xmax(G4int id) const
{
  return fVH2Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH2XWidth(G4int id) const
{
  return fVH2Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH2Nybins(G4int id) const
{
  return fVH2Manager->GetNbins(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH2Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH2Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH2Ymax(G4int id) const
{
  return fVH2Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH2YWidth(G4int id) const
{
  return fVH2Manager->GetWidth(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH3Nxbins(G4int id) const
{
  return fVH3Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH3Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3Xmax(G4int id) const
{
  return fVH3Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3XWidth(G4int id) const
{
  return fVH3Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH3Nybins(G4int id) const
{
  return fVH3Manager->GetNbins(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH3Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3Ymax(G4int id) const
{
  return fVH3Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3YWidth(G4int id) const
{
  return fVH3Manager->GetWidth(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetH3Nzbins(G4int id) const
{
  return fVH3Manager->GetNbins(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3Zmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVH3Manager->GetMinValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3Zmax(G4int id) const
{
  return fVH3Manager->GetMaxValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetH3ZWidth(G4int id) const
{
  return fVH3Manager->GetWidth(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetP1Nbins(G4int id) const
{
  return fVP1Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP1Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP1Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP1Xmax(G4int id) const
{
  return fVP1Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP1XWidth(G4int id) const
{
  return fVP1Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP1Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP1Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP1Ymax(G4int id) const
{
  return fVP1Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetP2Nxbins(G4int id) const
{
  return fVP2Manager->GetNbins(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2Xmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP2Manager->GetMinValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2Xmax(G4int id) const
{
  return fVP2Manager->GetMaxValue(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2XWidth(G4int id) const
{
  return fVP2Manager->GetWidth(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetP2Nybins(G4int id) const
{
  return fVP2Manager->GetNbins(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2Ymin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP2Manager->GetMinValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2Ymax(G4int id) const
{
  return fVP2Manager->GetMaxValue(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2YWidth(G4int id) const
{
  return fVP2Manager->GetWidth(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2Zmin(G4int id) const
{
// Returns xmin value with applied unit and histogram function

  return fVP2Manager->GetMinValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4double G4VAnalysisReader::GetP2Zmax(G4int id) const
{
  return fVP2Manager->GetMaxValue(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH1Title(G4int id) const
{
  return fVH1Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH1XAxisTitle(G4int id) const
{
  return fVH1Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH1YAxisTitle(G4int id) const
{
  return fVH1Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH2Title(G4int id) const
{
  return fVH2Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH2XAxisTitle(G4int id) const
{
  return fVH2Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH2YAxisTitle(G4int id) const
{
  return fVH2Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH2ZAxisTitle(G4int id) const
{
  return fVH2Manager->GetAxisTitle(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH3Title(G4int id) const
{
  return fVH3Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH3XAxisTitle(G4int id) const
{
  return fVH3Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH3YAxisTitle(G4int id) const
{
  return fVH3Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetH3ZAxisTitle(G4int id) const
{
  return fVH3Manager->GetAxisTitle(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetP1Title(G4int id) const
{
  return fVP1Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetP1XAxisTitle(G4int id) const
{
  return fVP1Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetP1YAxisTitle(G4int id) const
{
  return fVP1Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetP2Title(G4int id) const
{
  return fVP2Manager->GetTitle(id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetP2XAxisTitle(G4int id) const
{
  return fVP2Manager->GetAxisTitle(G4Analysis::kX, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetP2YAxisTitle(G4int id) const
{
  return fVP2Manager->GetAxisTitle(G4Analysis::kY, id);
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetP2ZAxisTitle(G4int id) const
{
  return fVP2Manager->GetAxisTitle(G4Analysis::kZ, id);
}

//_____________________________________________________________________________
inline
G4int G4VAnalysisReader::GetVerboseLevel() const
{
  return fState.GetVerboseLevel();
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetType() const
{
  return fVFileManager->GetFileType();
}

//_____________________________________________________________________________
inline
G4String G4VAnalysisReader::GetFileType() const
{
  return fVFileManager->GetFileType();
}
