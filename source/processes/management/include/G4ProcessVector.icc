//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// G4ProcessVector inline methods implementation
//
// Authors: G.Cosmo, H.Kurashige - 1998
// --------------------------------------------------------------------

inline G4bool G4ProcessVector::operator==(const G4ProcessVector& right) const
{
  return (this == (G4ProcessVector *) &right);
}

inline std::size_t G4ProcessVector::entries() const
{
  return pProcVector->size();
}

inline std::size_t G4ProcessVector::size() const
{
  return pProcVector->size();
}

inline std::size_t G4ProcessVector::length() const
{
  return pProcVector->size();
}

inline G4bool G4ProcessVector::insert(G4VProcess* aProcess)
{
  pProcVector->push_back(aProcess);
  return true;
}

inline G4VProcess* G4ProcessVector::removeLast()
{
  G4VProcess* rValue = pProcVector->back();
  pProcVector->pop_back();
  return rValue;
}

inline void G4ProcessVector::clear()
{
  pProcVector->clear();
}

inline G4VProcess* const& G4ProcessVector::operator[](G4int i) const
{
  return (*pProcVector)[i];
}

inline G4VProcess* const& G4ProcessVector::operator()(G4int i) const
{
  return (*pProcVector)[i];
}

inline G4VProcess* & G4ProcessVector::operator[](G4int i)
{
  return (*pProcVector)[i];
}

inline G4VProcess* & G4ProcessVector::operator()(G4int i)
{
  return (*pProcVector)[i];
}
