//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// 20100803  M. Kelsey -- Move implementations to this .icc file.  Use name
//		string to report output
// 20110718  M. Kelsey -- Add inelastic cross-section sum to deal with
//		suppressing elastic scattering off free nucleons (hydrogen)
// 20110719  M. Kelsey -- Add ctor argument for two-body initial state
// 20110725  M. Kelsey -- Save initial state as data member
// 20110728  M. Kelsey -- Fix Coverity #22954, recursive #include.
// 20110923  M. Kelsey -- Add optional ostream& argument to print() fns,
//		drop all "inline" keywords
// 20120608  M. Kelsey -- Fix variable-name "shadowing" compiler warnings.
// 20130627  M. Kelsey -- Use new function to print particle name strings.

#ifndef G4_CASCADE_DATA_ICC
#define G4_CASCADE_DATA_ICC

#include "G4InuclParticleNames.hh"
#include <iostream>
#include <iomanip>


// Fill cumulative cross-section arrays from input data
template <int NE,int N2,int N3,int N4,int N5,int N6,int N7,int N8,int N9>
void G4CascadeData<NE,N2,N3,N4,N5,N6,N7,N8,N9>::initialize() {
  // Initialize index offsets for cross-section array (can't do globally)
  index[0] = 0;   index[1] = N02; index[2] = N23; index[3] = N24;
  index[4] = N25; index[5] = N26; index[6] = N27; index[7] = N28;
  index[8] = N29;

  // Initialize multiplicity array
  for (G4int im = 0; im < NM; im++) {
    G4int start = index[im];
    G4int stop = index[im+1];
    for (G4int k = 0; k < NE; k++) {
      multiplicities[im][k] = 0.0;
      for (G4int i = start; i < stop; i++) {
 	multiplicities[im][k] += crossSections[i][k];
      }
    }
  }

  // Initialize total cross section arrays
  for (G4int k = 0; k < NE; k++) {
    sum[k] = 0.0;
    for (G4int im = 0; im < NM; im++) {
      sum[k] += multiplicities[im][k];
    }
  }

  // Identify elastic scattering channel and subtract from inclusive
  G4int i2b = 0;
  for (i2b=index[0]; i2b<index[1]; i2b++) {
    if (x2bfs[i2b][0]*x2bfs[i2b][1] == initialState) break;	// Found it
  }

  for (G4int k = 0; k < NE; k++) {
    if (i2b<index[1]) inelastic[k] = tot[k] - crossSections[i2b][k];
    else inelastic[k] = tot[k];		// FIXME:  No elastic channel in table!
  }
}


// Dump complete final state tables, all multiplicities
template <int NE,int N2,int N3,int N4,int N5,int N6,int N7,int N8,int N9>
void G4CascadeData<NE,N2,N3,N4,N5,N6,N7,N8,N9>::print(std::ostream& os) const {
  os << "\n " << name << " Total cross section:" << G4endl;
  printXsec(tot, os);
  os << "\n Summed cross section:" << G4endl;
  printXsec(sum, os);
  os << "\n Inelastic cross section:" << G4endl;
  printXsec(inelastic, os);
  os << "\n Individual channel cross sections" << G4endl;
  
  for (int im=2; im<NM+2; im++) print(im, os);
  return;
}

// Dump tables for specified multiplicity
template <int NE,int N2,int N3,int N4,int N5,int N6,int N7,int N8,int N9>
void G4CascadeData<NE,N2,N3,N4,N5,N6,N7,N8,N9>::
print(G4int mult, std::ostream& os) const {
  if (mult < 0) {		// Old interface used mult == -1 for all
    print(os);
    return;
  }

  G4int im = mult-2;		// Convert multiplicity to array index

  G4int start = index[im];
  G4int stop = index[im+1];
  os << "\n Mulitplicity " << mult << " (indices " << start << " to "
	 << stop-1 << ") summed cross section:" << G4endl;

  printXsec(multiplicities[im], os);
  
  for (G4int i=start; i<stop; i++) {
    G4int ichan=i-start;
    os << "\n final state x" << mult << "bfs[" << ichan << "] : ";
    for (G4int fsi=0; fsi<mult; fsi++) {
      switch (mult) {
      case 2: os << " " << G4InuclParticleNames::nameShort(x2bfs[ichan][fsi]);
	break;
      case 3: os << " " << G4InuclParticleNames::nameShort(x3bfs[ichan][fsi]);
	break;
      case 4: os << " " << G4InuclParticleNames::nameShort(x4bfs[ichan][fsi]);
	break;
      case 5: os << " " << G4InuclParticleNames::nameShort(x5bfs[ichan][fsi]);
	break;
      case 6: os << " " << G4InuclParticleNames::nameShort(x6bfs[ichan][fsi]);
	break;
      case 7: os << " " << G4InuclParticleNames::nameShort(x7bfs[ichan][fsi]);
	break;
      case 8: os << " " << G4InuclParticleNames::nameShort(x8bfs[ichan][fsi]);
	break;
      case 9: os << " " << G4InuclParticleNames::nameShort(x9bfs[ichan][fsi]);
	break;
      default: ;
      }
    }
    os << " -- cross section [" << i << "]:" << G4endl;
    printXsec(crossSections[i], os);
  }
}

// Dump individual cross-section table, two lines of 12 values
template <int NE,int N2,int N3,int N4,int N5,int N6,int N7,int N8,int N9>
void G4CascadeData<NE,N2,N3,N4,N5,N6,N7,N8,N9>::
printXsec(const G4double (&xsec)[NE], std::ostream& os) const {
  for (G4int k=0; k<NE; k++) {
    os << " " << std::setw(6) << xsec[k];
    if ((k+1)%10 == 0) os << G4endl;
  }
  os << G4endl;
}

#endif	/* G4_CASCADE_DATA_ICC */
