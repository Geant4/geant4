//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// by V. Lara
//
// Modif (03 September 2008) by J. M. Quesada for external choice of inverse 
// cross section option 
// JMQ (06 September 2008) Also external choice has been added for:
//                      - superimposed Coulomb barrier (if useSICB=true) 
// 23.08.2010 V.Ivanchenko general cleanup, move constructor and destructor 
//            the source, make GetReactionProduct() and IsItPossible inlined

inline G4bool G4VPreCompoundFragment::
IsItPossible(const G4Fragment & aFragment) const
{
  G4int pplus = aFragment.GetNumberOfCharged();
  G4int pneut = aFragment.GetNumberOfParticles()-pplus;
  return ((pneut >= theA - theZ) && (pplus >= theZ) && (theMaxKinEnergy > 0));
}

inline 
G4ReactionProduct * G4VPreCompoundFragment::GetReactionProduct() const
{
  G4ReactionProduct * theReactionProduct =
    new G4ReactionProduct(particle);
  theReactionProduct->SetMomentum(GetMomentum().vect());
  theReactionProduct->SetTotalEnergy(GetMomentum().e());
  return theReactionProduct;
}

inline G4int G4VPreCompoundFragment::GetA() const 
{ 
  return theA;
}

inline G4int G4VPreCompoundFragment::GetZ() const 
{ 
  return theZ;
}

inline G4int G4VPreCompoundFragment::GetRestA() const 
{ 
  return theResA;
}
    
inline G4int G4VPreCompoundFragment::GetRestZ() const 
{ 
  return theResZ;
}
    
inline G4double G4VPreCompoundFragment::GetBindingEnergy() const 
{
  return theBindingEnergy;
}

inline G4double G4VPreCompoundFragment::GetEnergyThreshold() const 
{ 
  return theMaxKinEnergy - theCoulombBarrier;
}
    
inline G4double G4VPreCompoundFragment::GetEmissionProbability() const 
{ 
  return theEmissionProbability;
}

inline G4double G4VPreCompoundFragment::GetNuclearMass(void) const 
{
  return theMass;
}

inline G4double G4VPreCompoundFragment::GetRestNuclearMass() const 
{
  return theResMass;
}

inline 
const G4LorentzVector& G4VPreCompoundFragment::GetMomentum() const 
{ 
  return theMomentum;
}
    
inline 
void G4VPreCompoundFragment::SetMomentum(const G4LorentzVector & value) 
{ 
  theMomentum = value;
}

inline void G4VPreCompoundFragment::SetOPTxs(G4int opt)
{
  OPTxs=opt;
}

inline void G4VPreCompoundFragment::UseSICB(G4bool use)
{
  useSICB=use;
}

