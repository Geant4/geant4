//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// 
//---------------------------------------------------------------
//
//  G4FastSimulationVector.hh
//
//  Description:
//    Extends the STL vector to replace RW.
//
//  History:
//    May 00: Verderi && MoraDeFreitas - First Implementation.
//
//---------------------------------------------------------------

template<class T> 
T* G4FastSimulationVector<T>::remove (const T* a)
{
  for (iterator it = std_pvector::begin();it<std_pvector::end(); it++)
    {
      if (**it==*a) 
	{
	  T* tmp=*it;
	  std_pvector::erase(it);
	  return tmp;
	} 
    }
  return 0;
}

template<class T>
T* G4FastSimulationVector<T>::removeAt (G4int i)
{
  iterator it=std_pvector::begin();
  int j;
  for(j=0;j<i;j++) it++;
  if(it!=std_pvector::end())
    {
      T* tmp = std_pvector::operator[](i);
      std_pvector::erase(it);
      return tmp;
    }
  else
    return 0;
}

template<class T>
void G4FastSimulationVector<T>::clearAndDestroy ()
{
  for (iterator it = std_pvector::begin();it<std_pvector::end(); it++)
    if(*it) delete *it;
  std_pvector::clear();
}
