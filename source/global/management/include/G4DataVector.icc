//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// class G4DataVector inline implementation
//
// Author: H.Kurashige, 18 September 2001
// --------------------------------------------------------------------

inline void G4DataVector::insertAt(std::size_t pos, const G4double& a)
{
  auto i = cbegin();
  for(std::size_t ptn = 0; (ptn < pos) && (i != cend()); ++i, ++ptn)
  {
    ;
  }
  if(i != cend())
  {
    insert(i, a);
  }
  else
  {
    push_back(a);
  }
}

inline std::size_t G4DataVector::index(const G4double& a) const
{
  std::size_t ptn = 0;
  for(auto i = cbegin(); i != cend(); ++i, ++ptn)
  {
    if((*i) == a)
    {
      break;
    }
  }
  return ptn;
}

inline G4bool G4DataVector::contains(const G4double& a) const
{
  return (index(a) < size());
}

inline G4bool G4DataVector::remove(const G4double& a)
{
  G4bool found = false;

  for(auto i = cbegin(); i != cend(); ++i)
  {
    if(!(*i != a))
    {
      erase(i);
      found = true;
      break;
    }
  }
  return found;
}

inline std::size_t G4DataVector::removeAll(const G4double& a)
{
  std::size_t ptn = 0;

  for(auto i = cbegin(); i != cend(); ++i)
  {
    if(!(*i != a))
    {
      erase(i);
      ++ptn;
      --i;
    }
  }
  return ptn;
}
