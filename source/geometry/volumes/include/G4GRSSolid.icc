//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// 
// class G4GRSSolid inline implementation
// ----------------------------------------------------------------------

inline
G4GRSSolid::G4GRSSolid( G4VSolid *pSolid,
                  const G4RotationMatrix *pRot,
                  const G4ThreeVector &tlate )
  : G4VTouchable(),
    fsolid(pSolid),
    ftlate(tlate)
{
  if (pRot != nullptr)
  {
    frot = new G4RotationMatrix(*pRot);
    if ( frot == nullptr )
    {
      G4Exception("G4GRSSolid::G4GRSSolid()","GeomVol0002",FatalException,
                  "Cannot allocate G4RotationMatrix, NULL pointer.");
    }
  }
  else
  {
    frot = nullptr;
  }
}

inline
G4GRSSolid::G4GRSSolid( G4VSolid *pSolid,
                  const G4RotationMatrix &rot,
                  const G4ThreeVector &tlate )
  : G4VTouchable(),
    fsolid(pSolid),
    ftlate(tlate)
{
  frot = new G4RotationMatrix(rot);
  if ( frot == nullptr )
  {
    G4Exception("G4GRSSolid::G4GRSSolid()","GeomVol0002",FatalException,
                "Cannot allocate G4RotationMatrix, NULL pointer.");
  }
}

inline
G4VSolid* G4GRSSolid::GetSolid( G4int depth ) const
{
  if( depth != 0 )
  {
    G4Exception("G4GRSSolid::GetSolid()", "GeomVol0003",
                FatalException, "History depth in input must be 0 !");
  }
  return fsolid;
}

inline
const G4ThreeVector& G4GRSSolid::GetTranslation( G4int depth ) const
{
  if( depth != 0 )
  {
    G4Exception("G4GRSSolid::GetTranslation()", "GeomVol0003",
                FatalException, "History depth in input must be 0 !");
  }
  return ftlate;
}

inline
const G4RotationMatrix* G4GRSSolid::GetRotation( G4int depth ) const
{
  if( depth != 0 )
  {
    G4Exception("G4GRSSolid::GetRotation()", "GeomVol0003",
                FatalException, "History depth in input must be 0 !");
  }
  return frot;
}
