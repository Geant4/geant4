//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
// 
// Class G4AssemblyVolume - inline implementation
//
// ----------------------------------------------------------------------

inline 
unsigned int G4AssemblyVolume::GetImprintsCount() const
{
  return fImprintsCounter;
}

inline 
void         G4AssemblyVolume::SetImprintsCount( unsigned int value )
{
  fImprintsCounter = value;
}

inline 
void         G4AssemblyVolume::ImprintsCountPlus()
{
  ++fImprintsCounter;
}

inline 
void         G4AssemblyVolume::ImprintsCountMinus()
{
  --fImprintsCounter;
}

inline 
unsigned int G4AssemblyVolume::GetAssemblyID() const
{
  return fAssemblyID;
}

inline 
void         G4AssemblyVolume::SetAssemblyID( unsigned int value )
{
  fAssemblyID = value;
}

inline std::vector<G4VPhysicalVolume*>::iterator
G4AssemblyVolume::GetVolumesIterator()
{
  std::vector<G4VPhysicalVolume*>::iterator iterator = fPVStore.begin();
  return iterator;
}

inline 
std::size_t G4AssemblyVolume::TotalImprintedVolumes() const
{
  return fPVStore.size();
}

inline G4Transform3D&
G4AssemblyVolume::GetImprintTransformation(unsigned int imprintID)
{
  return fImprintsTransf[imprintID];
}

inline std::vector<G4AssemblyTriplet>::iterator
G4AssemblyVolume::GetTripletsIterator()
{
  std::vector<G4AssemblyTriplet>::iterator iterator = fTriplets.begin();
  return iterator;
}

inline 
std::size_t G4AssemblyVolume::TotalTriplets() const
{
  return fTriplets.size();
}
