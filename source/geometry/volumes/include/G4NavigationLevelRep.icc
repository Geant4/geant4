//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// G4NavigationLevelRep inline implementation
//
// 1 October 1997, J.Apostolakis Initial version
// ----------------------------------------------------------------------

extern G4GEOM_DLL G4Allocator<G4NavigationLevelRep>*& aNavigLevelRepAllocator();

// Constructors
//--------------

inline
G4NavigationLevelRep::G4NavigationLevelRep( G4VPhysicalVolume* pPhysVol,
                                      const G4AffineTransform& afTransform,
                                            EVolume            volTp,
                                            G4int              repNo )
   :  sTransform(afTransform),
      sPhysicalVolumePtr(pPhysVol),
      sReplicaNo(repNo),
      sVolumeType(volTp)
{
}

inline
G4NavigationLevelRep::G4NavigationLevelRep()
   :  sTransform(),
      sVolumeType(kReplica)
{
}

inline
G4NavigationLevelRep::G4NavigationLevelRep( G4VPhysicalVolume* pPhysVol,
                                      const G4AffineTransform& levelAbove,
                                      const G4AffineTransform& relativeCurrent,
                                            EVolume            volTp,
                                            G4int              repNo )
   :  sPhysicalVolumePtr(pPhysVol),
      sReplicaNo(repNo),
      sVolumeType(volTp)
{
  sTransform.InverseProduct( levelAbove, relativeCurrent );
}

inline
G4NavigationLevelRep::G4NavigationLevelRep( G4NavigationLevelRep& right )
   :  sTransform(right.sTransform), 
      sPhysicalVolumePtr(right.sPhysicalVolumePtr),
      sReplicaNo(right.sReplicaNo),
      sVolumeType(right.sVolumeType)
{
}

// Destructor
//--------------

inline
G4NavigationLevelRep::~G4NavigationLevelRep()
{
#ifdef DEBUG_NAVIG_LEVEL
  if(fCountRef>0)
  {
    G4Exception("G4NavigationLevelRep::~G4NavigationLevelRep()",
                "GeomVol0003", FatalException,
                "Deletion of data-level object with positive reference count.");
  } 
#endif
}

// Operators
// --------------

inline
G4NavigationLevelRep& 
G4NavigationLevelRep::operator=( const G4NavigationLevelRep& right )
{
  if ( &right != this )
  {
    sTransform = right.sTransform;  
    sPhysicalVolumePtr = right.sPhysicalVolumePtr;
    sVolumeType = right.sVolumeType;
    sReplicaNo =  right.sReplicaNo;
    fCountRef = right.fCountRef;
  }
  return *this;
} 

// Accessors
// --------------

inline
G4VPhysicalVolume*
G4NavigationLevelRep::GetPhysicalVolume()
{
  return sPhysicalVolumePtr; 
}

inline
const G4AffineTransform&
G4NavigationLevelRep::GetTransform() const 
{
  return sTransform; 
} 

inline
const G4AffineTransform*
G4NavigationLevelRep::GetTransformPtr() const 
{
  return &sTransform; 
} 

inline
EVolume G4NavigationLevelRep::GetVolumeType() const 
{
  return sVolumeType; 
}

inline
G4int G4NavigationLevelRep::GetReplicaNo() const 
{
  return sReplicaNo; 
}

inline
void G4NavigationLevelRep::AddAReference() 
{
  ++fCountRef; 
}

inline
G4bool G4NavigationLevelRep::RemoveAReference() 
{
  return( --fCountRef <= 0 ); 
}

// There is no provision that this class is subclassed.
// If it is subclassed & new data members are added then the
// following "new" & "delete" will fail and give errors. 
//
inline
void* G4NavigationLevelRep::operator new(size_t)
{
  if (aNavigLevelRepAllocator() == nullptr)
  {
    aNavigLevelRepAllocator() = new G4Allocator<G4NavigationLevelRep>;
  }
  return (void *) aNavigLevelRepAllocator()->MallocSingle();
}

inline
void G4NavigationLevelRep::operator delete(void* aLevelRep)
{
  aNavigLevelRepAllocator()->FreeSingle((G4NavigationLevelRep *) aLevelRep);
}
