//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
// 
// G4NormalNavigation Inline Implementation
//
// --------------------------------------------------------------------

// ********************************************************************
// CheckMode
// ********************************************************************
//
inline
void G4NormalNavigation::CheckMode(G4bool mode)
{
  fCheck = mode;
}

// ********************************************************************
// LevelLocate
// ********************************************************************
//
inline
G4bool
G4NormalNavigation::LevelLocate( G4NavigationHistory& history,
                           const G4VPhysicalVolume* blockedVol,
                           const G4int,
                           const G4ThreeVector& globalPoint,
                           const G4ThreeVector* globalDirection,
                           const G4bool  pLocatedOnEdge, 
                                 G4ThreeVector &localPoint )
{
  G4VPhysicalVolume *targetPhysical, *samplePhysical;
  G4LogicalVolume *targetLogical;
  G4VSolid *sampleSolid;
  G4ThreeVector samplePoint;
  G4int targetNoDaughters;
  
  targetPhysical = history.GetTopVolume();
  targetLogical = targetPhysical->GetLogicalVolume();
  targetNoDaughters = G4int(targetLogical->GetNoDaughters());
  
  G4bool found = false;

  if ( targetNoDaughters!=0 )
  {
    //
    // Search daughters in volume
    //
    for ( auto sampleNo=targetNoDaughters-1; sampleNo>=0; sampleNo-- )
    {
      samplePhysical = targetLogical->GetDaughter(sampleNo);
      if ( samplePhysical!=blockedVol )
      {
        // Setup history
        //
        history.NewLevel(samplePhysical, kNormal, samplePhysical->GetCopyNo());
        sampleSolid = samplePhysical->GetLogicalVolume()->GetSolid();
        samplePoint = history.GetTopTransform().TransformPoint(globalPoint);
        if( G4AuxiliaryNavServices::
            CheckPointOnSurface(sampleSolid, samplePoint, globalDirection, 
                                history.GetTopTransform(), pLocatedOnEdge) )
        {
          // Enter this daughter
          //
          localPoint = samplePoint;
          found = true;
          break;
        }
        else
        {
          history.BackLevel();
        }
      }
    }
  }
  return found;
}
