//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
// 
// class G4VoxelNavigation Inline implementation
//
// --------------------------------------------------------------------

// ********************************************************************
// VoxelLocate
// ********************************************************************
//
inline
G4SmartVoxelNode*
G4VoxelNavigation::VoxelLocate( G4SmartVoxelHeader* pHead,
                                const G4ThreeVector& localPoint )
{
  G4SmartVoxelHeader* targetVoxelHeader = pHead;
  G4SmartVoxelNode* targetVoxelNode = nullptr;
  G4SmartVoxelProxy* sampleProxy;
  EAxis targetHeaderAxis;
  G4double targetHeaderMin, targetHeaderNodeWidth;
  G4int targetHeaderNoSlices, targetNodeNo;

  fVoxelDepth = 0;

  while ( targetVoxelNode == nullptr )
  {
    targetHeaderAxis = targetVoxelHeader->GetAxis();
    targetHeaderNoSlices = G4int(targetVoxelHeader->GetNoSlices());
    targetHeaderMin = targetVoxelHeader->GetMinExtent();
    targetHeaderNodeWidth = (targetVoxelHeader->GetMaxExtent()-targetHeaderMin)
                          / targetHeaderNoSlices;
    targetNodeNo = G4int( (localPoint(targetHeaderAxis)-targetHeaderMin)
                          / targetHeaderNodeWidth);
    // Rounding protection
    //
    if ( targetNodeNo<0 )
    {
      targetNodeNo = 0;
    }
    else if ( targetNodeNo>=targetHeaderNoSlices )
    {
      targetNodeNo = targetHeaderNoSlices-1;
    }
    // Stack info for stepping
    //
    fVoxelAxisStack[fVoxelDepth] = targetHeaderAxis;
    fVoxelNoSlicesStack[fVoxelDepth] = targetHeaderNoSlices;
    fVoxelSliceWidthStack[fVoxelDepth] = targetHeaderNodeWidth;
    fVoxelNodeNoStack[fVoxelDepth] = targetNodeNo;
    fVoxelHeaderStack[fVoxelDepth] = targetVoxelHeader;
    sampleProxy = targetVoxelHeader->GetSlice(targetNodeNo);

    if ( sampleProxy->IsNode() )
    {
      targetVoxelNode = sampleProxy->GetNode();
    }
    else
    {
      targetVoxelHeader = sampleProxy->GetHeader();
      ++fVoxelDepth;
    }
  }
  fVoxelNode = targetVoxelNode;
  return targetVoxelNode;
}

// ********************************************************************
// LevelLocate
// ********************************************************************
//
inline
G4bool
G4VoxelNavigation::LevelLocate( G4NavigationHistory& history,
                          const G4VPhysicalVolume* blockedVol,
                          const G4int,
                          const G4ThreeVector& globalPoint,
                          const G4ThreeVector* globalDirection,
                          const G4bool pLocatedOnEdge, 
                                G4ThreeVector& localPoint )
{
  G4SmartVoxelHeader *targetVoxelHeader;
  G4SmartVoxelNode *targetVoxelNode;
  G4VPhysicalVolume *targetPhysical, *samplePhysical;
  G4LogicalVolume *targetLogical;
  G4VSolid *sampleSolid;
  G4ThreeVector samplePoint;
  G4int targetNoDaughters;
  
  targetPhysical = history.GetTopVolume();
  targetLogical = targetPhysical->GetLogicalVolume();
  targetVoxelHeader = targetLogical->GetVoxelHeader();

  // Find the voxel containing the point
  //
  targetVoxelNode = VoxelLocate(targetVoxelHeader,localPoint);

  targetNoDaughters = G4int(targetVoxelNode->GetNoContained());
  if ( targetNoDaughters==0 ) return false;

  //
  // Search daughters in volume
  //

  for ( auto sampleNo=targetNoDaughters-1; sampleNo>=0; sampleNo-- )
  {
    samplePhysical = targetLogical->
                     GetDaughter(targetVoxelNode->GetVolume(sampleNo));
    if ( samplePhysical!=blockedVol )
    {
      // Setup history
      //
      history.NewLevel(samplePhysical, kNormal, samplePhysical->GetCopyNo());
      sampleSolid = samplePhysical->GetLogicalVolume()->GetSolid();
      samplePoint = history.GetTopTransform().TransformPoint(globalPoint);

      if( G4AuxiliaryNavServices::CheckPointOnSurface(sampleSolid,
                                                      samplePoint,
                                                      globalDirection, 
                                                      history.GetTopTransform(),
                                                      pLocatedOnEdge) )
      {
        // Enter this daughter
        //
        localPoint = samplePoint;
        return true;
      }
      else
      {
        history.BackLevel();
      }
    }
  }
  return false;
}

// ********************************************************************
// GetVerboseLevel
// ********************************************************************
//
inline
G4int G4VoxelNavigation::GetVerboseLevel() const
{
  return fLogger->GetVerboseLevel();
}

// ********************************************************************
// CheckMode
// ********************************************************************
//
inline
void  G4VoxelNavigation::CheckMode(G4bool mode)
{
  fCheck = mode;
}

// ********************************************************************
// EnableBestSafety
// ********************************************************************
//
inline
void  G4VoxelNavigation::EnableBestSafety(G4bool flag)
{
  fBestSafety = flag;
}
