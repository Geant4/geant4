//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// G4Ellipsoid
//
// Implementation of inline methods of G4Ellipsoid
// --------------------------------------------------------------------

inline
G4double G4Ellipsoid::GetDx() const
{
  return xSemiAxis;
}

inline
G4double G4Ellipsoid::GetDy() const
{
  return ySemiAxis;
}

inline
G4double G4Ellipsoid::GetDz() const
{
  return zSemiAxis;
}

inline
G4double G4Ellipsoid::GetSemiAxisMax (G4int i) const
{
  return (i==0) ? xSemiAxis
       : (i==1) ? ySemiAxis
       : zSemiAxis;
}

inline
G4double G4Ellipsoid::GetZBottomCut() const
{
  return zBottomCut;
}

inline
G4double G4Ellipsoid::GetZTopCut() const
{
  return zTopCut;
}

inline
void G4Ellipsoid::SetSemiAxis (G4double newxSemiAxis,
                               G4double newySemiAxis,
                               G4double newzSemiAxis)
{
  xSemiAxis= newxSemiAxis; ySemiAxis= newySemiAxis; zSemiAxis= newzSemiAxis;
  semiAxisMax = xSemiAxis > ySemiAxis ? xSemiAxis : ySemiAxis;
  if (zSemiAxis > semiAxisMax) { semiAxisMax= zSemiAxis; }
  if (zBottomCut < -zSemiAxis) { zBottomCut = -zSemiAxis; }
  if (zTopCut > +zSemiAxis) { zTopCut = +zSemiAxis; }
  fRebuildPolyhedron = true;
}

inline
void G4Ellipsoid::SetZCuts (G4double newzBottomCut, G4double newzTopCut)
{
  if (newzBottomCut < -zSemiAxis)
    { zBottomCut = -zSemiAxis; }
  else
    { zBottomCut = newzBottomCut; }

  if (newzTopCut > +zSemiAxis)
    { zTopCut = +zSemiAxis; }
  else
    { zTopCut = newzTopCut; }
  fRebuildPolyhedron = true;
}

inline
G4double G4Ellipsoid::GetCubicVolume()
{
  if(fCubicVolume != 0 ) {;}
  else
  {
    if ((zTopCut > +zSemiAxis && zBottomCut < -zSemiAxis)
     || (zTopCut == 0 && zBottomCut == 0) )
    {
      fCubicVolume = (4./3.)*CLHEP::pi*xSemiAxis*ySemiAxis*zSemiAxis;
    }
    else 
    {   
      fCubicVolume = CLHEP::pi*xSemiAxis*ySemiAxis
                   * ((zTopCut-std::pow(zTopCut,3.)/(3.*sqr(zSemiAxis)))
                   - (zBottomCut-std::pow(zBottomCut,3.)/(3.*sqr(zSemiAxis))));
    }
  }
  return fCubicVolume;
}

inline
G4double G4Ellipsoid::GetSurfaceArea()
{
  if(fSurfaceArea != 0.) {;}
  else   { fSurfaceArea = G4VSolid::GetSurfaceArea(); }
  return fSurfaceArea;
}
