//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// Implementation of inline methods of G4EllipticalCone
//
// Author: Dionysios Anninos, 8.9.2005
// --------------------------------------------------------------------

inline
G4double G4EllipticalCone::GetSemiAxisMax () const
{
  return std::max(xSemiAxis,ySemiAxis);
}

inline
G4double G4EllipticalCone::GetSemiAxisMin () const
{
  return std::min(xSemiAxis,ySemiAxis);
}

inline
G4double G4EllipticalCone::GetSemiAxisX () const
{
  return xSemiAxis;
}

inline
G4double G4EllipticalCone::GetSemiAxisY () const
{
  return ySemiAxis;
}

inline
G4double G4EllipticalCone::GetZMax() const
{
  return zheight;
}

inline
G4double G4EllipticalCone::GetZTopCut() const
{
  return zTopCut;
}

inline
void G4EllipticalCone::SetSemiAxis (G4double newxSemiAxis,
                                    G4double newySemiAxis,
                                    G4double newzMax)
{
  xSemiAxis = newxSemiAxis;
  ySemiAxis = newySemiAxis;
  zheight   = newzMax;
  if (zTopCut > +zheight) { zTopCut = +zheight; }
  G4double axmin = std::min(xSemiAxis,ySemiAxis);
  cosAxisMin = axmin/std::sqrt(1. + axmin*axmin);
  invXX = 1/(xSemiAxis*xSemiAxis);
  invYY = 1/(ySemiAxis*ySemiAxis);
  fRebuildPolyhedron = true;
}

inline
void G4EllipticalCone::SetZCut (G4double newzTopCut)
{
  zTopCut = std::min(newzTopCut,zheight);
  fRebuildPolyhedron = true;
}
