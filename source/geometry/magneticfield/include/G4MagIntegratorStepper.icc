//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// G4MagIntegratorStepper inline methods implementation
//
// Author: J.Apostolakis, CERN - 15.01.1997
// --------------------------------------------------------------------

inline
G4int G4MagIntegratorStepper::IntegrationOrder()
{
  return fIntegrationOrder;
}
   
inline
G4EquationOfMotion* G4MagIntegratorStepper::GetEquationOfMotion()
{
  return fEquation_Rhs;
} 

inline
const G4EquationOfMotion* G4MagIntegratorStepper::GetEquationOfMotion() const
{
  return fEquation_Rhs;
}

inline
void G4MagIntegratorStepper::SetEquationOfMotion(G4EquationOfMotion* newEq)
{
  if( newEq != nullptr )
  {
    fEquation_Rhs = newEq;
  }
} 

inline
unsigned long G4MagIntegratorStepper::GetfNoRHSCalls()
{
  return fNoRHSCalls;
}

inline
void G4MagIntegratorStepper::ResetfNORHSCalls()
{
  fNoRHSCalls = 0;
}

inline
G4bool G4MagIntegratorStepper::IsFSAL() const
{
  return fIsFSAL;
}

inline
void G4MagIntegratorStepper::SetIntegrationOrder(G4int order)
{
  fIntegrationOrder = order;
}

inline
void G4MagIntegratorStepper::SetFSAL(G4bool flag)
{
  fIsFSAL = flag;
}

inline
G4int G4MagIntegratorStepper::GetNumberOfVariables() const
{
  return fNoIntegrationVariables;
}


inline
G4int G4MagIntegratorStepper::GetNumberOfStateVariables() const
{
  return fNoStateVariables;
}

inline
void G4MagIntegratorStepper::RightHandSide(const G4double y[],
                                                 G4double dydx[]) const
{
  fEquation_Rhs->RightHandSide(y, dydx);
  ++fNoRHSCalls; // IncrementRHSCalls();
}

inline
void G4MagIntegratorStepper::RightHandSide(const G4double y[],
                                                 G4double dydx[],
                                                 G4double field[]) const
{
  fEquation_Rhs->EvaluateRhsReturnB(y, dydx, field);
  ++fNoRHSCalls;
}

inline
void G4MagIntegratorStepper::NormaliseTangentVector( G4double vec[6] )
{
  G4double drds2 = vec[3]*vec[3]+vec[4]*vec[4]+vec[5]*vec[5];

  if( std::fabs(drds2 - 1.0) > 1.e-14 )
  {
    G4double normx = 1.0 / std::sqrt(drds2);
    for(auto i=3; i<6; ++i) { vec[i] *= normx; }
  }
}

inline
void G4MagIntegratorStepper::NormalisePolarizationVector( G4double vec[12] )
{
  G4double drds2 = vec[9]*vec[9]+vec[10]*vec[10]+vec[11]*vec[11];

  if( drds2 > 0. )
  {
    if( std::fabs(drds2 - 1.0) > 1.e-14 )
    {
      G4double normx = 1.0 / std::sqrt(drds2);
      for(auto i=9; i<12; ++i)  { vec[i] *= normx; }
    }
  }
}
