//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// G4MagHelicalStepper inline methods implementation
//
// Created: J.Apostolakis, CERN - 05.11.1998
// --------------------------------------------------------------------

inline void
G4MagHelicalStepper::LinearStep( const G4double  yIn[],
                                       G4double  h,
                                       G4double  yLinear[]) const
{
  // Linear Step in regions of no field

  G4double momentum_val = std::sqrt(yIn[3]*yIn[3]+yIn[4]*yIn[4]+yIn[5]*yIn[5]);
  G4double inv_momentum = 1.0 / momentum_val;
  G4double yDir[3];

  for( auto i = 0; i < 3; ++i )
  {
    yDir[i]   = inv_momentum * yIn[i+3];     
    yLinear[i]   = yIn[i] + h * yDir[i];
    yLinear[i+3] = yIn[i+3];
  }
}

inline void
G4MagHelicalStepper::MagFieldEvaluate(const G4double y[],
                                      G4ThreeVector& Bfield )   
{
  G4double B[3];
  GetEquationOfMotion()->GetFieldValue(y, B);
  Bfield = G4ThreeVector( B[0], B[1], B[2] );
}

inline G4double
G4MagHelicalStepper::GetInverseCurve(const G4double Momentum,
                                     const G4double Bmag)
{
  constexpr G4double chargeFactor = 1.0 / (CLHEP::eplus*CLHEP::c_light);
  
  G4double  inv_momentum  = 1.0 / Momentum ;
  G4double particleCharge = fPtrMagEqOfMot->FCof() * chargeFactor;
  G4double fCoefficient   = -fUnitConstant  * particleCharge * inv_momentum;

  return fCoefficient*Bmag;
}

inline void G4MagHelicalStepper::SetAngCurve(const G4double Ang)
{                                                
  fAngCurve=Ang;
}

inline G4double G4MagHelicalStepper::GetAngCurve() const 
{
  return fAngCurve;
}

inline void G4MagHelicalStepper::SetCurve(const G4double Curve)
{
  frCurve=Curve;  
}

inline G4double G4MagHelicalStepper::GetCurve() const 
{
  return frCurve;  
}

inline void G4MagHelicalStepper::SetRadHelix(const G4double Rad)
{
  frHelix=Rad;  
}

inline G4double G4MagHelicalStepper::GetRadHelix() const 
{
  return frHelix;  
}
