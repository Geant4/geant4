//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
//
// class G4BlockingList  Inlined Implementation
//
// --------------------------------------------------------------------

inline size_t G4BlockingList::Length() const
{
  return fBlockingList.size();
}

inline void G4BlockingList::BlockVolume(const G4int vol)
{
  fBlockingList[vol] = fBlockTagNo;
}

inline G4bool G4BlockingList::IsBlocked(const G4int vol) const
{
  return ( fBlockingList[vol]==fBlockTagNo ) ? true : false;
}

inline void G4BlockingList::Reset()
{
  if ( fBlockTagNo!=kBlockTagNoMax )
  {
    fBlockTagNo += 1;
  }
  else
  {
    FullyReset();
  }    
}

inline void G4BlockingList::Enlarge(const G4int nv)
{
  size_t len=fBlockingList.size();
  if ( G4int(len)<nv )
  {
    size_t newlen = (nv/fStride+1)*fStride;
    fBlockingList.resize(newlen);
    for (auto i=len; i<newlen; ++i)
    {
      fBlockingList[i] = 0;
    }
  }
}
