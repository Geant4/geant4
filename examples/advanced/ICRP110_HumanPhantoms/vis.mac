# Echo UI commands
/control/verbose 2
#
/phantom/setPhantomSection full
# Note: It's only feasible to view the "full" phantom if
# specialMeshRendering is set below. If not, we suggest
#/phantom/setPhantomSection head
#
/run/initialize
#
#/vis/open OGLSX
/vis/open OGL 600x600-0+0
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Define background colour (comment out for black as default)
#/vis/viewer/set/background white
#
# Draw phantom
/vis/viewer/set/specialMeshRendering
/vis/drawVolume
#
# Alternatively comment out
# /vis/viewer/set/specialMeshRendering
# /vis/drawVolume
# and replace by
# Temporarily switch culling off so even a "transparent/invisible" volume
#   is drawn
#/vis/viewer/set/culling global false
# phantomContainer is transparent - but defines "extent"
#/vis/drawVolume phantomContainer ! 0
#/vis/viewer/set/culling global true
# Add vis user action
#/vis/scene/add/userAction
#
# Specify view angle:
/vis/viewer/set/viewpointThetaPhi 85 -75 deg
#/vis/viewer/set/lightsMove with-camera
#
# Set Voxels number to be visualised
/vis/ogl/set/displayListLimit 9999999
#
# Specify zoom value:
#/vis/viewer/zoom 2.
#
# Specify style (surface or wireframe, etc.):
#/vis/viewer/set/style wireframe
/vis/viewer/set/rotationStyle freeRotation
/vis/viewer/set/hiddenMarker true
#
# Draw coordinate axes:
/vis/scene/add/axes
#
# Draw trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
#/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e- blue
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
#Define the primary particles
/control/execute primary.mac
#
# Try "/vis/viewer/interpolate g4views 1000 0", which runs a cutaway
#   plane through the phantom.
# (See examples/extended/visualization/movies for how to create view
#   files for interpolation.)
