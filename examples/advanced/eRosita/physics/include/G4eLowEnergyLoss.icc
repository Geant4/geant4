//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4eLowEnergyLoss.icc 107396 2017-11-10 08:28:08Z gcosmo $
// GEANT4 tag $Name: geant4-09-01-ref-00 $
//
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file 
//
//      History: based on object model of
//      2nd December 1995, G.Cosmo
//      ------------ G4eLowEnergyLoss physics process ------------
//                  by Laszlo Urban, 20 March 1997
// ***************************************************************
// It is the first implementation of the NEW UNIFIED ENERGY LOSS PROCESS.
// It calculates the energy loss of e+/e-.
// -------------------------------------------------------------
//
// 08-09-98  cleanup
// 28-03-02  V.Ivanchenko add fluorescence flag
// 21-01-03  V.Ivanchenko cut per region
// 18-04-03  V.Ivanchenko finalRange redefinition
//
// ---------------------------------------------------------------

inline G4double G4eLowEnergyLoss::GetConstraints(
                                      const G4DynamicParticle* aParticle,
                                      const G4MaterialCutsCouple* couple)
{
  G4double StepLimit;
  // returns the Step limit
  // dRoverRange is the max. allowed relative range loss in one Step
  // it calculates dEdx and the range as well....

  const G4ParticleDefinition* ParticleType=aParticle->GetDefinition();

  Charge = aParticle->GetDefinition()->GetPDGCharge();
  if(Charge != lastCharge) lastCharge = Charge ;

  G4double KineticEnergy = aParticle->GetKineticEnergy();

  fdEdx = G4EnergyLossTables::GetDEDX(ParticleType,KineticEnergy,couple);
  fRangeNow =
           G4EnergyLossTables::GetRange(ParticleType,KineticEnergy,couple);

  G4double r = std::min(finalRange, couple->GetProductionCuts()
                 ->GetProductionCut(idxG4ElectronCut));

  if (fRangeNow > r) {
    StepLimit = dRoverRange*fRangeNow + r*(1.0 - dRoverRange)*(2.0 - r/fRangeNow);
    //randomise this value
    if (rndmStepFlag) StepLimit = finalRange + (StepLimit-finalRange)*G4UniformRand();
    if (StepLimit > fRangeNow) StepLimit = fRangeNow;
  }
  else StepLimit = fRangeNow;

  return StepLimit;
}

//

inline G4double G4eLowEnergyLoss::GetContinuousStepLimit(
                                               const G4Track& track,
                                               G4double,
                                               G4double currentMinimumStep,
                                               G4double&)
{

  G4double Step =
    GetConstraints(track.GetDynamicParticle(),track.GetMaterialCutsCouple());

  if ((Step>0.0)&&(Step<currentMinimumStep)) currentMinimumStep = Step;

  return Step ;
}

//
inline G4bool G4eLowEnergyLoss::IsApplicable(const G4ParticleDefinition&
                                                     particle)
{
  return(   (&particle == G4Electron::Electron())
           ||(&particle == G4Positron::Positron()) );
}

inline void G4eLowEnergyLoss::ActivateFluorescence(G4bool val)
{
  theFluo = val; 
}

inline G4bool G4eLowEnergyLoss::Fluorescence() const
{
  return theFluo;
}

//    

