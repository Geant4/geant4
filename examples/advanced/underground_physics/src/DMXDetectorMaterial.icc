//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
//
// Author: Alex Howard (alexander.howard@cern.ch)
//
// History:
// -----------
//
// 23rd November 2002 Modified GXe and LXe material tables to include new
//                    scintillation method - Alex Howard
//
  G4double density,      // density
    a,                   // atomic mass
    z;                   // atomic number
  G4String name,         // name
    symbol;              // symbol
  G4int ncomponents,     // n components
    iz,                  // number of protons
    in;                  // number of nuceons
  G4double abundance,    // abundance
    temperature,         // temperature
    pressure;            // pressure


  // making vacuum
  G4Material* vacuum = new G4Material 
    (name="Vacuum", z=1., a=1.*g/mole, density=1.e-20*g/cm3,
     kStateGas, temperature=0.1*kelvin, pressure=1.e-20*bar);


  // xenons
  G4Element* elementXe = new G4Element( "Xenon", "Xe", 54., 131.29*g/mole );
  G4Material* LXe = new G4Material
     ("LXe", 3.02*g/cm3, 1, kStateLiquid, 173.15*kelvin, 1.5*atmosphere );
  G4Material* GXe = new G4Material
     ("GXe", 0.005887*g/cm3, 1, kStateGas, 173.15*kelvin, 1.5*atmosphere );
  LXe->AddElement( elementXe, 1);
  GXe->AddElement( elementXe, 1);

  const G4int NUMENTRIES = 3;
  //  G4double LXe_PP[NUMENTRIES]    = { 7.07*eV, 7.07*eV };
  G4double LXe_PP[NUMENTRIES]    = { 7.0*eV , 7.07*eV, 7.14*eV };
  G4double LXe_SCINT[NUMENTRIES] = { 0.1, 1.0, 0.1 };
  G4double LXe_RIND[NUMENTRIES]  = { 1.59 , 1.57, 1.54 };
  G4double LXe_ABSL[NUMENTRIES]  = { 35.*cm, 35.*cm, 35.*cm}; //atten length
  G4MaterialPropertiesTable *LXe_mt = new G4MaterialPropertiesTable();
  LXe_mt->AddProperty("FASTCOMPONENT", LXe_PP, LXe_SCINT, NUMENTRIES);
  LXe_mt->AddProperty("SLOWCOMPONENT", LXe_PP, LXe_SCINT, NUMENTRIES);
  LXe_mt->AddProperty("RINDEX",        LXe_PP, LXe_RIND,  NUMENTRIES);
  LXe_mt->AddProperty("ABSLENGTH",     LXe_PP, LXe_ABSL,  NUMENTRIES);
  LXe_mt->AddConstProperty("SCINTILLATIONYIELD",12000./MeV); // include QE 20%
  // and 13eV creation energy for photons - may be 15eV?
  // Fano factor assumed 1; should be much less for Xe ~ 0.13
  // but the Fano factor is already partially included in the correlated 
  // electron production - therefore not the absolute Fano factor here:
  LXe_mt->AddConstProperty("RESOLUTIONSCALE",1.0);
  LXe_mt->AddConstProperty("FASTTIMECONSTANT",20.*ns);
  LXe_mt->AddConstProperty("SLOWTIMECONSTANT",45.*ns);
  LXe_mt->AddConstProperty("YIELDRATIO",1.0);
  LXe->SetMaterialPropertiesTable(LXe_mt);

  //  G4double GXe_PP[NUMENTRIES]    = { 7.07*eV, 7.07*eV };
  G4double GXe_PP[NUMENTRIES]    = { 7.0*eV, 7.07*eV, 7.14*eV };
  G4double GXe_SCINT[NUMENTRIES] = { 0.1, 1.0, 0.1 };
  G4double GXe_RIND[NUMENTRIES]  = { 1.00, 1.00, 1.00 };
  G4double GXe_ABSL[NUMENTRIES]  = { 100*m, 100*m, 100*m}; //atten length
  G4MaterialPropertiesTable *GXe_mt = new G4MaterialPropertiesTable();
  GXe_mt->AddProperty("FASTCOMPONENT", GXe_PP, GXe_SCINT, NUMENTRIES);
  GXe_mt->AddProperty("SLOWCOMPONENT", GXe_PP, GXe_SCINT, NUMENTRIES);
  GXe_mt->AddProperty("RINDEX",        GXe_PP, GXe_RIND,  NUMENTRIES);
  GXe_mt->AddProperty("ABSLENGTH",     GXe_PP, GXe_ABSL,  NUMENTRIES);
  GXe_mt->AddConstProperty("SCINTILLATIONYIELD",12000./MeV); // include QE 20%
  GXe_mt->AddConstProperty("RESOLUTIONSCALE",1.0);
  GXe_mt->AddConstProperty("FASTTIMECONSTANT",20.*ns);
  GXe_mt->AddConstProperty("SLOWTIMECONSTANT",45.*ns);
  GXe_mt->AddConstProperty("YIELDRATIO",1.0);
  GXe->SetMaterialPropertiesTable(GXe_mt);


  // making quartz
  G4Element* O  = new G4Element
    (name="Oxygen"  ,symbol="O" , z= 8., a=16.00*g/mole);
  G4Element* Si = new G4Element
    (name="Silicon",symbol="Si" , z= 14., a=28.09*g/mole);
  G4Material* quartz = new G4Material
    (name="quartz", density=2.200*g/cm3, ncomponents=2);
  quartz->AddElement(Si, 1);
  quartz->AddElement(O , 2);

  G4double quartz_PP[NUMENTRIES]   = { 5.0*eV, 6.69*eV, 7.50*eV }; // lambda range 4 ri
  G4double quartz_RIND[NUMENTRIES] = { 1.51, 1.57, 1.61 };     // ref index
  //  G4double quartz_RIND[NUMENTRIES] = { 1.45, 1.51, 1.54 };     // ref index
  G4double quartz_ABSL[NUMENTRIES] = { 3.0*cm, 3.0*cm, 3.0*cm };// atten length
  G4MaterialPropertiesTable *quartz_mt = new G4MaterialPropertiesTable();
  quartz_mt->AddProperty("RINDEX", quartz_PP, quartz_RIND, NUMENTRIES);
  quartz_mt->AddProperty("ABSLENGTH", quartz_PP, quartz_ABSL, NUMENTRIES);
  quartz->SetMaterialPropertiesTable(quartz_mt);


  // aluminium
  G4Element* Al = new G4Element
    (name="Aluminium"  ,symbol="Al" , z= 13., a=26.98*g/mole);  
  G4Material* metalAl = new G4Material
    (name="MetalAluminium", density=2.700*g/cm3, ncomponents=1);
  metalAl->AddElement(Al, 1);


  // photocathode aluminium
  G4Material* cathmetalAl = new G4Material
    (name="CathodeMetalAluminium", density=2.700*g/cm3, ncomponents=1);
  cathmetalAl->AddElement(Al, 1);

  G4double cathmetal_PP[NUMENTRIES]   = { 5.0*eV, 6.69*eV, 7.50*eV };
  G4double cathmetal_RIND[NUMENTRIES] = { 1.51, 1.57, 1.61 };     // ref index
  G4double cathmetal_ABSL[NUMENTRIES] = { 1.e-20*m,  1.e-20*m,  1.e-20*m };// atten length
//  G4double cathmetal_ABSL[NUMENTRIES] = { 3.0*cm, 3.0*cm, 3.0*cm };// atten length
  G4MaterialPropertiesTable *cathmetal_mt = new G4MaterialPropertiesTable();
  cathmetal_mt->AddProperty("RINDEX", cathmetal_PP, cathmetal_RIND,NUMENTRIES);
  cathmetal_mt->AddProperty("ABSLENGTH", cathmetal_PP, cathmetal_ABSL, NUMENTRIES);
  cathmetalAl->SetMaterialPropertiesTable(cathmetal_mt);


  // iron
  G4Element* Fe = new G4Element
    (name="Iron"  ,symbol="Fe" , z= 26., a=55.85*g/mole);  
  G4Material* metalFe = new G4Material
    (name="MetalIron", density=7.874*g/cm3, ncomponents=1);
  metalFe->AddElement(Fe, 1);


  // stainless steel
  G4Element* C  = new G4Element( "Carbon", "C",   6. , 12.011*g/mole);
  G4Element* Co = new G4Element( "Cobalt", "Co", 27. , 58.9332*g/mole);
  G4Material* ssteel = new G4Material
    (name="Steel", density=7.7*g/cm3, ncomponents=3);
  ssteel->AddElement(C, 0.04);
  ssteel->AddElement(Fe, 0.88);
  ssteel->AddElement(Co, 0.08);


  // copper
  G4Element* Cu = new G4Element
    (name="Copper"  ,symbol="Cu" , z= 29., a=63.55*g/mole);  
  G4Material* metalCu = new G4Material
    (name="MetalCopper", density=8.960*g/cm3, ncomponents=1);
  metalCu->AddElement(Cu, 1);

  // lead
  G4Element* Pb = new G4Element
    (name="Lead",symbol="Pb" , z= 82., a=207.2*g/mole);
  G4Material* metalPb = new G4Material
    (name="MetalLead", density=11.340*g/cm3, ncomponents=1);
  metalPb->AddElement(Pb, 1);


/*
  // Americium: - NOTE it's AmO2..........
  G4Isotope* Am241 = new G4Isotope
    (name="Americium241", iz= 95, in=241, a=241.0*g/mole);
  G4Element* Am = new G4Element
    (name="Americium241", "Am", ncomponents=1);
  Am->AddIsotope(Am241, abundance=1);
  G4Material* sourceAm = new G4Material
    (name="AmericiumSource", density=13.61*g/cm3, ncomponents=2);
  sourceAm->AddElement(Am, 1);
  sourceAm->AddElement(O , 2);
*/

  // using Uranium because Americium not yet defined for RDM
  G4Isotope* U235 = new G4Isotope
    (name="Uranium235", iz= 92, in=235, a=235.0*g/mole);
  G4Element* U = new G4Element
    (name="Uranium", "U", ncomponents=1);
  U->AddIsotope(U235, abundance=1);
  G4Material* sourceAm = new G4Material
    (name="UraniumSource", density=13.61*g/cm3, ncomponents=1);
  sourceAm->AddElement(U, 1);

  // air
  G4Element* N = new G4Element
    (name="Nitrogen",symbol="N" , z= 7., a=14.00674*g/mole);
  G4Material* Air = new G4Material
    ("AIR", 1.2929*kg/m3, 2, kStateGas, 300.00*kelvin, 1.0*atmosphere);
  Air->AddElement(N, 0.8);
  Air->AddElement(O , 0.2);

  // liquid nitrogen:
  G4Material* LN2 = new G4Material
    ("LN2", 0.8*g/cm3, 1, kStateLiquid, 77.*kelvin, 1.0*atmosphere);
  LN2->AddElement(N, 1);

  //concrete
  G4Element* H = new G4Element
    (name="Hydrogen",symbol="H" , z= 1., a=1.00794*g/mole);
  G4Element* Ca = new G4Element
    (name="Calcium",symbol="Ca" , z= 20., a=40.078*g/mole);
  G4Material* concrete = new G4Material
    (name="Concrete", density=2.3*g/cm3, ncomponents=6);
  concrete->AddElement(Si, 0.227915);
  concrete->AddElement(O, 0.60541);
  concrete->AddElement(H, 0.09972);
  concrete->AddElement(Ca, 0.04986);
  concrete->AddElement(Al, 0.014245);
  concrete->AddElement(Fe, 0.00285);


  //water
  G4Material* water = new G4Material
    (name="water", density=1.00*g/cm3, ncomponents=2);
  water->AddElement(H , 2);
  water->AddElement(O , 1);


  // wood
  G4Material* wood = new G4Material
    (name="wood", density=0.9*g/cm3, ncomponents=3);
  wood->AddElement(H , 4);
  wood->AddElement(O , 1);
  wood->AddElement(C , 2);
  
  // print materials
  //  G4cout << *(G4Material::GetMaterialTable()) << G4endl;
  //  G4cout << *(G4Isotope::GetIsotopeTable())   << G4endl;
  //  G4cout << *(G4Element::GetElementTable())   << G4endl;

  // assign materials
       world_mat = concrete;
         lab_mat = Air;
    cupboard_mat = wood;
       glass_mat = quartz;
       panel_mat = metalAl;
        door_mat = wood;
	desk_mat = wood;
       crate_mat = metalAl;
   LN2jacket_mat = ssteel;
         LN2_mat = LN2;
      jacket_mat = ssteel;
jacketflange_mat = ssteel;
      vacuum_mat = vacuum;
      copper_mat = metalCu;
      vessel_mat = ssteel;
//         GXe_mat = GXe;
         GXe_mat = LXe;
    CuShield_mat = metalCu;
         LXe_mat = LXe;
       alpha_mat = metalPb;
   americium_mat = sourceAm;
        ring_mat = ssteel;
      mirror_mat = metalAl;
        grid_mat = LXe;
         pmt_mat = quartz;
      phcath_mat = cathmetalAl;
